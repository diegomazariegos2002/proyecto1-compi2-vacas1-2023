
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftorleftandleftsumarestanonassocmenormayormenorigualmayorigualigualaciondiferenteleftmultiplicaciondivisionmoduloleftpotenciarightnotlefturestaand any boolean break c_Abre c_Cierra cadena coma concat console continue diferente division dosPuntos else false id if igual igualacion let llave_Abre llave_Cierra log mayor mayorigual menor menorigual modulo multiplicacion not null number numero or p_Abre p_Cierra potencia punto puntoYcoma resta split string suma toExponential toFixed toLowerCase toString toUpperCase true while\n    INICIO : ENTRADAS\n    \n    ENTRADAS : ENTRADAS ENTRADA\n    \n    ENTRADAS : ENTRADA\n    \n    ENTRADA : IMPRIMIR puntoYcoma\n            |   IF puntoYcoma\n            |   WHILE puntoYcoma\n            |   BREAK\n            |  CONTINUE\n    \n    BREAK : break puntoYcoma\n    \n    CONTINUE : continue puntoYcoma\n    \n    WHILE : while p_Abre EXPRESION p_Cierra llave_Abre ENTRADAS llave_Cierra\n    \n    IF : if p_Abre EXPRESION p_Cierra llave_Abre ENTRADAS llave_Cierra COMPLEMENTO_IF\n    \n    COMPLEMENTO_IF : else IF\n                    | else llave_Abre ENTRADAS llave_Cierra\n                    | \n    \n    ENTRADA : DECLARACION puntoYcoma\n    \n    DECLARACION : let id igual EXPRESION\n    \n    DECLARACION : let id dosPuntos TIPO igual EXPRESION\n    \n    DECLARACION : let id \n    \n    DECLARACION : let id dosPuntos TIPO\n    \n    ENTRADA : ASIGNACION puntoYcoma\n    \n    ASIGNACION : id igual EXPRESION\n    \n    ASIGNACION : id LISTAINDICES igual EXPRESION\n    \n    IMPRIMIR : console punto log p_Abre LISTAEXPRESIONES p_Cierra\n    \n    LISTAEXPRESIONES :  LISTAEXPRESIONES coma EXPRESION\n    \n    LISTAEXPRESIONES : EXPRESION\n    \n    LISTAINDICES :  LISTAINDICES c_Abre EXPRESION c_Cierra\n    \n    LISTAINDICES : c_Abre EXPRESION c_Cierra\n    \n    EXPRESION : EXPRESION suma EXPRESION\n    \n    EXPRESION : EXPRESION resta EXPRESION\n    \n    EXPRESION : EXPRESION multiplicacion EXPRESION\n    \n    EXPRESION : EXPRESION division EXPRESION\n    \n    EXPRESION : EXPRESION potencia EXPRESION\n    \n    EXPRESION : EXPRESION modulo EXPRESION\n    \n    EXPRESION : resta EXPRESION %prec uresta\n    \n    EXPRESION : EXPRESION and EXPRESION\n    \n    EXPRESION : EXPRESION or EXPRESION\n    \n    EXPRESION : not EXPRESION\n    \n    EXPRESION : EXPRESION mayor EXPRESION\n    \n    EXPRESION : EXPRESION mayorigual EXPRESION\n    \n    EXPRESION : EXPRESION menor EXPRESION\n    \n    EXPRESION : EXPRESION menorigual EXPRESION\n    \n    EXPRESION : EXPRESION igualacion EXPRESION\n    \n    EXPRESION : EXPRESION diferente EXPRESION\n    \n    EXPRESION : FUNCION_TOFIXED\n            | FUNCION_TOEXPONENTIAL\n            | FUNCION_TOSTRING\n            | FUNCION_TOLOWERCASE\n            | FUNCION_TOUPPERCASE\n            | FUNCION_SPLIT\n    \n    FUNCION_TOFIXED : id punto toFixed p_Abre EXPRESION p_Cierra\n    \n    FUNCION_TOEXPONENTIAL : id punto toExponential p_Abre EXPRESION p_Cierra\n    \n    FUNCION_TOSTRING : id punto toString p_Abre p_Cierra\n    \n    FUNCION_TOLOWERCASE : id punto toLowerCase p_Abre p_Cierra\n    \n    FUNCION_TOUPPERCASE : id punto toUpperCase p_Abre p_Cierra\n    \n    FUNCION_SPLIT : id punto split p_Abre cadena p_Cierra\n    \n    EXPRESION : cadena\n    \n    EXPRESION : numero\n    \n    EXPRESION : true\n                | false\n    \n    EXPRESION : null\n    \n    EXPRESION : id\n    \n    EXPRESION : id LISTAINDICES\n    \n    EXPRESION : c_Abre LISTAEXPRESIONES c_Cierra\n    \n    TIPO : number\n    \n    TIPO : string\n    \n    TIPO : boolean\n    \n    TIPO : any\n    '
    
_lr_action_items = {'console':([0,2,3,7,8,18,19,20,21,22,23,27,28,90,113,117,125,141,142,],[11,11,-3,-7,-8,-2,-4,-5,-6,-16,-21,-9,-10,11,11,11,11,11,11,]),'if':([0,2,3,7,8,18,19,20,21,22,23,27,28,90,113,117,125,136,141,142,],[12,12,-3,-7,-8,-2,-4,-5,-6,-16,-21,-9,-10,12,12,12,12,12,12,12,]),'while':([0,2,3,7,8,18,19,20,21,22,23,27,28,90,113,117,125,141,142,],[13,13,-3,-7,-8,-2,-4,-5,-6,-16,-21,-9,-10,13,13,13,13,13,13,]),'break':([0,2,3,7,8,18,19,20,21,22,23,27,28,90,113,117,125,141,142,],[14,14,-3,-7,-8,-2,-4,-5,-6,-16,-21,-9,-10,14,14,14,14,14,14,]),'continue':([0,2,3,7,8,18,19,20,21,22,23,27,28,90,113,117,125,141,142,],[15,15,-3,-7,-8,-2,-4,-5,-6,-16,-21,-9,-10,15,15,15,15,15,15,]),'let':([0,2,3,7,8,18,19,20,21,22,23,27,28,90,113,117,125,141,142,],[16,16,-3,-7,-8,-2,-4,-5,-6,-16,-21,-9,-10,16,16,16,16,16,16,]),'id':([0,2,3,7,8,16,18,19,20,21,22,23,25,26,27,28,30,32,35,36,49,51,54,55,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,90,112,113,114,117,118,119,125,141,142,],[17,17,-3,-7,-8,29,-2,-4,-5,-6,-16,-21,48,48,-9,-10,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,17,48,17,48,17,48,48,17,17,17,]),'$end':([1,2,3,7,8,18,19,20,21,22,23,27,28,],[0,-1,-3,-7,-8,-2,-4,-5,-6,-16,-21,-9,-10,]),'llave_Cierra':([3,7,8,18,19,20,21,22,23,27,28,117,125,142,],[-3,-7,-8,-2,-4,-5,-6,-16,-21,-9,-10,127,134,143,]),'puntoYcoma':([4,5,6,9,10,14,15,29,37,38,39,40,41,42,43,44,45,46,47,48,53,73,74,75,80,81,82,83,84,85,86,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,111,115,116,126,127,130,131,132,134,135,137,138,139,140,143,],[19,20,21,22,23,27,28,-19,-45,-46,-47,-48,-49,-50,-57,-58,-59,-60,-61,-62,-22,-35,-38,-63,-17,-20,-65,-66,-67,-68,-23,-28,-29,-30,-31,-32,-33,-34,-36,-37,-39,-40,-41,-42,-43,-44,-64,-27,-24,-18,-15,-53,-54,-55,-11,-12,-51,-52,-56,-13,-14,]),'punto':([11,48,],[24,76,]),'p_Abre':([12,13,33,105,106,107,108,109,110,],[25,26,57,118,119,120,121,122,123,]),'igual':([17,29,31,81,82,83,84,85,88,115,],[30,51,54,114,-65,-66,-67,-68,-28,-27,]),'c_Abre':([17,25,26,30,31,32,35,36,48,49,51,54,55,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,75,88,112,114,115,118,119,],[32,49,49,49,55,49,49,49,32,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,55,-28,49,49,-27,49,49,]),'log':([24,],[33,]),'resta':([25,26,30,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,56,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,78,80,86,87,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,111,112,114,115,118,119,124,126,128,129,130,131,132,137,138,139,],[35,35,35,35,60,35,35,-45,-46,-47,-48,-49,-50,-57,-58,-59,-60,-61,-62,35,60,35,60,35,35,60,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-35,-38,-63,60,60,60,60,-28,-29,-30,-31,-32,-33,-34,60,60,-39,-40,-41,-42,-43,-44,-64,35,35,-27,35,35,60,60,60,60,-53,-54,-55,-51,-52,-56,]),'not':([25,26,30,32,35,36,49,51,54,55,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,112,114,118,119,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'cadena':([25,26,30,32,35,36,49,51,54,55,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,112,114,118,119,123,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,133,]),'numero':([25,26,30,32,35,36,49,51,54,55,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,112,114,118,119,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'true':([25,26,30,32,35,36,49,51,54,55,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,112,114,118,119,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'false':([25,26,30,32,35,36,49,51,54,55,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,112,114,118,119,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'null':([25,26,30,32,35,36,49,51,54,55,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,112,114,118,119,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'dosPuntos':([29,],[52,]),'p_Cierra':([34,37,38,39,40,41,42,43,44,45,46,47,48,50,73,74,75,78,88,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,111,115,120,121,122,124,128,129,130,131,132,133,137,138,139,],[58,-45,-46,-47,-48,-49,-50,-57,-58,-59,-60,-61,-62,79,-35,-38,-63,-26,-28,116,-29,-30,-31,-32,-33,-34,-36,-37,-39,-40,-41,-42,-43,-44,-64,-27,130,131,132,-25,137,138,-53,-54,-55,139,-51,-52,-56,]),'suma':([34,37,38,39,40,41,42,43,44,45,46,47,48,50,53,56,73,74,75,78,80,86,87,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,111,115,124,126,128,129,130,131,132,137,138,139,],[59,-45,-46,-47,-48,-49,-50,-57,-58,-59,-60,-61,-62,59,59,59,-35,-38,-63,59,59,59,59,-28,-29,-30,-31,-32,-33,-34,59,59,-39,-40,-41,-42,-43,-44,-64,-27,59,59,59,59,-53,-54,-55,-51,-52,-56,]),'multiplicacion':([34,37,38,39,40,41,42,43,44,45,46,47,48,50,53,56,73,74,75,78,80,86,87,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,111,115,124,126,128,129,130,131,132,137,138,139,],[61,-45,-46,-47,-48,-49,-50,-57,-58,-59,-60,-61,-62,61,61,61,-35,-38,-63,61,61,61,61,-28,61,61,-31,-32,-33,-34,61,61,61,61,61,61,61,61,-64,-27,61,61,61,61,-53,-54,-55,-51,-52,-56,]),'division':([34,37,38,39,40,41,42,43,44,45,46,47,48,50,53,56,73,74,75,78,80,86,87,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,111,115,124,126,128,129,130,131,132,137,138,139,],[62,-45,-46,-47,-48,-49,-50,-57,-58,-59,-60,-61,-62,62,62,62,-35,-38,-63,62,62,62,62,-28,62,62,-31,-32,-33,-34,62,62,62,62,62,62,62,62,-64,-27,62,62,62,62,-53,-54,-55,-51,-52,-56,]),'potencia':([34,37,38,39,40,41,42,43,44,45,46,47,48,50,53,56,73,74,75,78,80,86,87,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,111,115,124,126,128,129,130,131,132,137,138,139,],[63,-45,-46,-47,-48,-49,-50,-57,-58,-59,-60,-61,-62,63,63,63,-35,-38,-63,63,63,63,63,-28,63,63,63,63,-33,63,63,63,63,63,63,63,63,63,-64,-27,63,63,63,63,-53,-54,-55,-51,-52,-56,]),'modulo':([34,37,38,39,40,41,42,43,44,45,46,47,48,50,53,56,73,74,75,78,80,86,87,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,111,115,124,126,128,129,130,131,132,137,138,139,],[64,-45,-46,-47,-48,-49,-50,-57,-58,-59,-60,-61,-62,64,64,64,-35,-38,-63,64,64,64,64,-28,64,64,-31,-32,-33,-34,64,64,64,64,64,64,64,64,-64,-27,64,64,64,64,-53,-54,-55,-51,-52,-56,]),'and':([34,37,38,39,40,41,42,43,44,45,46,47,48,50,53,56,73,74,75,78,80,86,87,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,111,115,124,126,128,129,130,131,132,137,138,139,],[65,-45,-46,-47,-48,-49,-50,-57,-58,-59,-60,-61,-62,65,65,65,-35,-38,-63,65,65,65,65,-28,-29,-30,-31,-32,-33,-34,-36,65,-39,-40,-41,-42,-43,-44,-64,-27,65,65,65,65,-53,-54,-55,-51,-52,-56,]),'or':([34,37,38,39,40,41,42,43,44,45,46,47,48,50,53,56,73,74,75,78,80,86,87,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,111,115,124,126,128,129,130,131,132,137,138,139,],[66,-45,-46,-47,-48,-49,-50,-57,-58,-59,-60,-61,-62,66,66,66,-35,-38,-63,66,66,66,66,-28,-29,-30,-31,-32,-33,-34,-36,-37,-39,-40,-41,-42,-43,-44,-64,-27,66,66,66,66,-53,-54,-55,-51,-52,-56,]),'mayor':([34,37,38,39,40,41,42,43,44,45,46,47,48,50,53,56,73,74,75,78,80,86,87,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,111,115,124,126,128,129,130,131,132,137,138,139,],[67,-45,-46,-47,-48,-49,-50,-57,-58,-59,-60,-61,-62,67,67,67,-35,-38,-63,67,67,67,67,-28,67,67,-31,-32,-33,-34,67,67,None,None,None,None,None,None,-64,-27,67,67,67,67,-53,-54,-55,-51,-52,-56,]),'mayorigual':([34,37,38,39,40,41,42,43,44,45,46,47,48,50,53,56,73,74,75,78,80,86,87,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,111,115,124,126,128,129,130,131,132,137,138,139,],[68,-45,-46,-47,-48,-49,-50,-57,-58,-59,-60,-61,-62,68,68,68,-35,-38,-63,68,68,68,68,-28,68,68,-31,-32,-33,-34,68,68,None,None,None,None,None,None,-64,-27,68,68,68,68,-53,-54,-55,-51,-52,-56,]),'menor':([34,37,38,39,40,41,42,43,44,45,46,47,48,50,53,56,73,74,75,78,80,86,87,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,111,115,124,126,128,129,130,131,132,137,138,139,],[69,-45,-46,-47,-48,-49,-50,-57,-58,-59,-60,-61,-62,69,69,69,-35,-38,-63,69,69,69,69,-28,69,69,-31,-32,-33,-34,69,69,None,None,None,None,None,None,-64,-27,69,69,69,69,-53,-54,-55,-51,-52,-56,]),'menorigual':([34,37,38,39,40,41,42,43,44,45,46,47,48,50,53,56,73,74,75,78,80,86,87,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,111,115,124,126,128,129,130,131,132,137,138,139,],[70,-45,-46,-47,-48,-49,-50,-57,-58,-59,-60,-61,-62,70,70,70,-35,-38,-63,70,70,70,70,-28,70,70,-31,-32,-33,-34,70,70,None,None,None,None,None,None,-64,-27,70,70,70,70,-53,-54,-55,-51,-52,-56,]),'igualacion':([34,37,38,39,40,41,42,43,44,45,46,47,48,50,53,56,73,74,75,78,80,86,87,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,111,115,124,126,128,129,130,131,132,137,138,139,],[71,-45,-46,-47,-48,-49,-50,-57,-58,-59,-60,-61,-62,71,71,71,-35,-38,-63,71,71,71,71,-28,71,71,-31,-32,-33,-34,71,71,None,None,None,None,None,None,-64,-27,71,71,71,71,-53,-54,-55,-51,-52,-56,]),'diferente':([34,37,38,39,40,41,42,43,44,45,46,47,48,50,53,56,73,74,75,78,80,86,87,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,111,115,124,126,128,129,130,131,132,137,138,139,],[72,-45,-46,-47,-48,-49,-50,-57,-58,-59,-60,-61,-62,72,72,72,-35,-38,-63,72,72,72,72,-28,72,72,-31,-32,-33,-34,72,72,None,None,None,None,None,None,-64,-27,72,72,72,72,-53,-54,-55,-51,-52,-56,]),'c_Cierra':([37,38,39,40,41,42,43,44,45,46,47,48,56,73,74,75,77,78,87,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,111,115,124,130,131,132,137,138,139,],[-45,-46,-47,-48,-49,-50,-57,-58,-59,-60,-61,-62,88,-35,-38,-63,111,-26,115,-28,-29,-30,-31,-32,-33,-34,-36,-37,-39,-40,-41,-42,-43,-44,-64,-27,-25,-53,-54,-55,-51,-52,-56,]),'coma':([37,38,39,40,41,42,43,44,45,46,47,48,73,74,75,77,78,88,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,111,115,124,130,131,132,137,138,139,],[-45,-46,-47,-48,-49,-50,-57,-58,-59,-60,-61,-62,-35,-38,-63,112,-26,-28,112,-29,-30,-31,-32,-33,-34,-36,-37,-39,-40,-41,-42,-43,-44,-64,-27,-25,-53,-54,-55,-51,-52,-56,]),'number':([52,],[82,]),'string':([52,],[83,]),'boolean':([52,],[84,]),'any':([52,],[85,]),'llave_Abre':([58,79,136,],[90,113,141,]),'toFixed':([76,],[105,]),'toExponential':([76,],[106,]),'toString':([76,],[107,]),'toLowerCase':([76,],[108,]),'toUpperCase':([76,],[109,]),'split':([76,],[110,]),'else':([127,],[136,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'INICIO':([0,],[1,]),'ENTRADAS':([0,90,113,141,],[2,117,125,142,]),'ENTRADA':([0,2,90,113,117,125,141,142,],[3,18,3,3,18,18,3,18,]),'IMPRIMIR':([0,2,90,113,117,125,141,142,],[4,4,4,4,4,4,4,4,]),'IF':([0,2,90,113,117,125,136,141,142,],[5,5,5,5,5,5,140,5,5,]),'WHILE':([0,2,90,113,117,125,141,142,],[6,6,6,6,6,6,6,6,]),'BREAK':([0,2,90,113,117,125,141,142,],[7,7,7,7,7,7,7,7,]),'CONTINUE':([0,2,90,113,117,125,141,142,],[8,8,8,8,8,8,8,8,]),'DECLARACION':([0,2,90,113,117,125,141,142,],[9,9,9,9,9,9,9,9,]),'ASIGNACION':([0,2,90,113,117,125,141,142,],[10,10,10,10,10,10,10,10,]),'LISTAINDICES':([17,48,],[31,75,]),'EXPRESION':([25,26,30,32,35,36,49,51,54,55,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,112,114,118,119,],[34,50,53,56,73,74,78,80,86,87,78,91,92,93,94,95,96,97,98,99,100,101,102,103,104,124,126,128,129,]),'FUNCION_TOFIXED':([25,26,30,32,35,36,49,51,54,55,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,112,114,118,119,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'FUNCION_TOEXPONENTIAL':([25,26,30,32,35,36,49,51,54,55,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,112,114,118,119,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'FUNCION_TOSTRING':([25,26,30,32,35,36,49,51,54,55,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,112,114,118,119,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'FUNCION_TOLOWERCASE':([25,26,30,32,35,36,49,51,54,55,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,112,114,118,119,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'FUNCION_TOUPPERCASE':([25,26,30,32,35,36,49,51,54,55,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,112,114,118,119,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'FUNCION_SPLIT':([25,26,30,32,35,36,49,51,54,55,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,112,114,118,119,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'LISTAEXPRESIONES':([49,57,],[77,89,]),'TIPO':([52,],[81,]),'COMPLEMENTO_IF':([127,],[135,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> INICIO","S'",1,None,None,None),
  ('INICIO -> ENTRADAS','INICIO',1,'p_INICIO','parser.py',57),
  ('ENTRADAS -> ENTRADAS ENTRADA','ENTRADAS',2,'p_ENTRADAS_PARTE_1','parser.py',63),
  ('ENTRADAS -> ENTRADA','ENTRADAS',1,'p_ENTRADAS_PARTE_2','parser.py',70),
  ('ENTRADA -> IMPRIMIR puntoYcoma','ENTRADA',2,'p_ENTRADA','parser.py',76),
  ('ENTRADA -> IF puntoYcoma','ENTRADA',2,'p_ENTRADA','parser.py',77),
  ('ENTRADA -> WHILE puntoYcoma','ENTRADA',2,'p_ENTRADA','parser.py',78),
  ('ENTRADA -> BREAK','ENTRADA',1,'p_ENTRADA','parser.py',79),
  ('ENTRADA -> CONTINUE','ENTRADA',1,'p_ENTRADA','parser.py',80),
  ('BREAK -> break puntoYcoma','BREAK',2,'p_BREAK','parser.py',98),
  ('CONTINUE -> continue puntoYcoma','CONTINUE',2,'p_CONTINUE','parser.py',104),
  ('WHILE -> while p_Abre EXPRESION p_Cierra llave_Abre ENTRADAS llave_Cierra','WHILE',7,'p_WHILE','parser.py',111),
  ('IF -> if p_Abre EXPRESION p_Cierra llave_Abre ENTRADAS llave_Cierra COMPLEMENTO_IF','IF',8,'p_IF','parser.py',118),
  ('COMPLEMENTO_IF -> else IF','COMPLEMENTO_IF',2,'p_COMPLEMENTO_IF','parser.py',124),
  ('COMPLEMENTO_IF -> else llave_Abre ENTRADAS llave_Cierra','COMPLEMENTO_IF',4,'p_COMPLEMENTO_IF','parser.py',125),
  ('COMPLEMENTO_IF -> <empty>','COMPLEMENTO_IF',0,'p_COMPLEMENTO_IF','parser.py',126),
  ('ENTRADA -> DECLARACION puntoYcoma','ENTRADA',2,'p_ENTRADA_Declaracion','parser.py',139),
  ('DECLARACION -> let id igual EXPRESION','DECLARACION',4,'p_DECLARACION_NoTipada','parser.py',145),
  ('DECLARACION -> let id dosPuntos TIPO igual EXPRESION','DECLARACION',6,'p_DECLARACION_Tipada','parser.py',152),
  ('DECLARACION -> let id','DECLARACION',2,'p_DECLARACION_SinExpresion_SinTipado','parser.py',158),
  ('DECLARACION -> let id dosPuntos TIPO','DECLARACION',4,'p_DECLARACION_SinExpresion_Tipado','parser.py',164),
  ('ENTRADA -> ASIGNACION puntoYcoma','ENTRADA',2,'p_ENTRADA_Asignacion','parser.py',172),
  ('ASIGNACION -> id igual EXPRESION','ASIGNACION',3,'p_ASIGNACION','parser.py',178),
  ('ASIGNACION -> id LISTAINDICES igual EXPRESION','ASIGNACION',4,'p_ASIGNACION_VEC','parser.py',184),
  ('IMPRIMIR -> console punto log p_Abre LISTAEXPRESIONES p_Cierra','IMPRIMIR',6,'p_IMPRIMIR_1','parser.py',191),
  ('LISTAEXPRESIONES -> LISTAEXPRESIONES coma EXPRESION','LISTAEXPRESIONES',3,'p_LISTAEXPRESIONES_1','parser.py',197),
  ('LISTAEXPRESIONES -> EXPRESION','LISTAEXPRESIONES',1,'p_LISTAEXPRESIONES_2','parser.py',205),
  ('LISTAINDICES -> LISTAINDICES c_Abre EXPRESION c_Cierra','LISTAINDICES',4,'p_LISTAEXPRESIONES_Indices','parser.py',211),
  ('LISTAINDICES -> c_Abre EXPRESION c_Cierra','LISTAINDICES',3,'p_LISTAEXPRESIONES_Indices_2','parser.py',218),
  ('EXPRESION -> EXPRESION suma EXPRESION','EXPRESION',3,'p_EXPRESION_suma','parser.py',226),
  ('EXPRESION -> EXPRESION resta EXPRESION','EXPRESION',3,'p_EXPRESION_resta','parser.py',233),
  ('EXPRESION -> EXPRESION multiplicacion EXPRESION','EXPRESION',3,'p_EXPRESION_multiplicacion','parser.py',240),
  ('EXPRESION -> EXPRESION division EXPRESION','EXPRESION',3,'p_EXPRESION_division','parser.py',247),
  ('EXPRESION -> EXPRESION potencia EXPRESION','EXPRESION',3,'p_EXPRESION_potencia','parser.py',254),
  ('EXPRESION -> EXPRESION modulo EXPRESION','EXPRESION',3,'p_EXPRESION_modulo','parser.py',261),
  ('EXPRESION -> resta EXPRESION','EXPRESION',2,'p_EXPRESION_negativo','parser.py',268),
  ('EXPRESION -> EXPRESION and EXPRESION','EXPRESION',3,'p_EXPRESION_and','parser.py',277),
  ('EXPRESION -> EXPRESION or EXPRESION','EXPRESION',3,'p_EXPRESION_or','parser.py',284),
  ('EXPRESION -> not EXPRESION','EXPRESION',2,'p_EXPRESION_not','parser.py',291),
  ('EXPRESION -> EXPRESION mayor EXPRESION','EXPRESION',3,'p_EXPRESION_mayor','parser.py',300),
  ('EXPRESION -> EXPRESION mayorigual EXPRESION','EXPRESION',3,'p_EXPRESION_mayorigual','parser.py',307),
  ('EXPRESION -> EXPRESION menor EXPRESION','EXPRESION',3,'p_EXPRESION_menor','parser.py',314),
  ('EXPRESION -> EXPRESION menorigual EXPRESION','EXPRESION',3,'p_EXPRESION_menorigual','parser.py',321),
  ('EXPRESION -> EXPRESION igualacion EXPRESION','EXPRESION',3,'p_EXPRESION_igualacion','parser.py',328),
  ('EXPRESION -> EXPRESION diferente EXPRESION','EXPRESION',3,'p_EXPRESION_diferente','parser.py',335),
  ('EXPRESION -> FUNCION_TOFIXED','EXPRESION',1,'p_EXPRESION_funcionesnativas','parser.py',344),
  ('EXPRESION -> FUNCION_TOEXPONENTIAL','EXPRESION',1,'p_EXPRESION_funcionesnativas','parser.py',345),
  ('EXPRESION -> FUNCION_TOSTRING','EXPRESION',1,'p_EXPRESION_funcionesnativas','parser.py',346),
  ('EXPRESION -> FUNCION_TOLOWERCASE','EXPRESION',1,'p_EXPRESION_funcionesnativas','parser.py',347),
  ('EXPRESION -> FUNCION_TOUPPERCASE','EXPRESION',1,'p_EXPRESION_funcionesnativas','parser.py',348),
  ('EXPRESION -> FUNCION_SPLIT','EXPRESION',1,'p_EXPRESION_funcionesnativas','parser.py',349),
  ('FUNCION_TOFIXED -> id punto toFixed p_Abre EXPRESION p_Cierra','FUNCION_TOFIXED',6,'p_FUNCION_TOFIXED','parser.py',355),
  ('FUNCION_TOEXPONENTIAL -> id punto toExponential p_Abre EXPRESION p_Cierra','FUNCION_TOEXPONENTIAL',6,'p_FUNCION_TOEXPONENTIAL','parser.py',362),
  ('FUNCION_TOSTRING -> id punto toString p_Abre p_Cierra','FUNCION_TOSTRING',5,'p_FUNCION_TOSTRING','parser.py',369),
  ('FUNCION_TOLOWERCASE -> id punto toLowerCase p_Abre p_Cierra','FUNCION_TOLOWERCASE',5,'p_FUNCION_TOLOWERCASE','parser.py',376),
  ('FUNCION_TOUPPERCASE -> id punto toUpperCase p_Abre p_Cierra','FUNCION_TOUPPERCASE',5,'p_FUNCION_TOUPPERCASE','parser.py',383),
  ('FUNCION_SPLIT -> id punto split p_Abre cadena p_Cierra','FUNCION_SPLIT',6,'p_FUNCION_SPLIT','parser.py',390),
  ('EXPRESION -> cadena','EXPRESION',1,'p_EXPRESION_cadena','parser.py',399),
  ('EXPRESION -> numero','EXPRESION',1,'p_EXPRESION_numero','parser.py',406),
  ('EXPRESION -> true','EXPRESION',1,'p_EXPRESION_booleano','parser.py',413),
  ('EXPRESION -> false','EXPRESION',1,'p_EXPRESION_booleano','parser.py',414),
  ('EXPRESION -> null','EXPRESION',1,'p_EXPRESION_null','parser.py',421),
  ('EXPRESION -> id','EXPRESION',1,'p_EXPRESION_Acceso','parser.py',428),
  ('EXPRESION -> id LISTAINDICES','EXPRESION',2,'p_EXPRESION_Acceso_Vector','parser.py',435),
  ('EXPRESION -> c_Abre LISTAEXPRESIONES c_Cierra','EXPRESION',3,'p_EXPRESION_Vector','parser.py',442),
  ('TIPO -> number','TIPO',1,'p_TIPO_NUMBER','parser.py',450),
  ('TIPO -> string','TIPO',1,'p_TIPO_STRING','parser.py',456),
  ('TIPO -> boolean','TIPO',1,'p_TIPO_BOOLEAN','parser.py',462),
  ('TIPO -> any','TIPO',1,'p_TIPO_ANY','parser.py',468),
]
