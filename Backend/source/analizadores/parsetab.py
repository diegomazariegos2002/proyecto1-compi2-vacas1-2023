
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftorleftandleftsumarestanonassocmenormayormenorigualmayorigualigualaciondiferenteleftmultiplicaciondivisionmoduloleftpotenciarightnotlefturestaand any boolean break c_Abre c_Cierra cadena coma concat console continue decremento diferente division dosPuntos else false fn for id if igual igualacion incremento let llave_Abre llave_Cierra log mayor mayorigual menor menorigual modulo multiplicacion not null number numero or p_Abre p_Cierra potencia punto puntoYcoma resta return split string suma toExponential toFixed toLowerCase toString toUpperCase true while\n    INICIO : ENTRADAS\n    \n    ENTRADAS : ENTRADAS ENTRADA\n    \n    ENTRADAS : ENTRADA\n    \n    ENTRADA : IMPRIMIR puntoYcoma\n            |   IF puntoYcoma\n            |   WHILE puntoYcoma\n            |   BREAK\n            |   CONTINUE\n            |   FOR puntoYcoma\n            |   INCREMENTO puntoYcoma\n            |   DECREMENTO puntoYcoma\n            |   FUNC puntoYcoma\n    \n    FUNC : fn id p_Abre p_Cierra llave_Abre ENTRADAS llave_Cierra\n    \n    FOR : for p_Abre DECLARACION puntoYcoma EXPRESION puntoYcoma FORITERADOR p_Cierra llave_Abre ENTRADAS llave_Cierra\n    \n    FORITERADOR : ASIGNACION\n                | INCREMENTO\n                | DECREMENTO\n    \n    BREAK : break puntoYcoma\n    \n    CONTINUE : continue puntoYcoma\n    \n    WHILE : while p_Abre EXPRESION p_Cierra llave_Abre ENTRADAS llave_Cierra\n    \n    IF : if p_Abre EXPRESION p_Cierra llave_Abre ENTRADAS llave_Cierra COMPLEMENTO_IF\n    \n    COMPLEMENTO_IF : else IF\n                    | else llave_Abre ENTRADAS llave_Cierra\n                    | \n    \n    ENTRADA : DECLARACION puntoYcoma\n    \n    DECLARACION : let id igual EXPRESION\n    \n    DECLARACION : let id dosPuntos TIPO igual EXPRESION\n    \n    DECLARACION : let id \n    \n    DECLARACION : let id dosPuntos TIPO\n    \n    DECLARACION : let id dosPuntos TIPO c_Abre c_Cierra igual EXPRESION\n    \n    DECLARACION : let id dosPuntos TIPO c_Abre c_Cierra\n    \n    ENTRADA : ASIGNACION puntoYcoma\n    \n    ASIGNACION : id igual EXPRESION\n    \n    ASIGNACION : id LISTAINDICES igual EXPRESION\n    \n    INCREMENTO : id incremento \n    \n    DECREMENTO : id decremento\n    \n    IMPRIMIR : console punto log p_Abre LISTAEXPRESIONES p_Cierra\n    \n    LISTAEXPRESIONES :  LISTAEXPRESIONES coma EXPRESION\n    \n    LISTAEXPRESIONES : EXPRESION\n    \n    LISTAINDICES :  LISTAINDICES c_Abre EXPRESION c_Cierra\n    \n    LISTAINDICES : c_Abre EXPRESION c_Cierra\n    \n    EXPRESION : EXPRESION suma EXPRESION\n    \n    EXPRESION : EXPRESION resta EXPRESION\n    \n    EXPRESION : EXPRESION multiplicacion EXPRESION\n    \n    EXPRESION : EXPRESION division EXPRESION\n    \n    EXPRESION : EXPRESION potencia EXPRESION\n    \n    EXPRESION : EXPRESION modulo EXPRESION\n    \n    EXPRESION : resta EXPRESION %prec uresta\n    \n    EXPRESION : EXPRESION and EXPRESION\n    \n    EXPRESION : EXPRESION or EXPRESION\n    \n    EXPRESION : not EXPRESION\n    \n    EXPRESION : EXPRESION mayor EXPRESION\n    \n    EXPRESION : EXPRESION mayorigual EXPRESION\n    \n    EXPRESION : EXPRESION menor EXPRESION\n    \n    EXPRESION : EXPRESION menorigual EXPRESION\n    \n    EXPRESION : EXPRESION igualacion EXPRESION\n    \n    EXPRESION : EXPRESION diferente EXPRESION\n    \n    EXPRESION : FUNCION_TOFIXED\n            | FUNCION_TOEXPONENTIAL\n            | FUNCION_TOSTRING\n            | FUNCION_TOLOWERCASE\n            | FUNCION_TOUPPERCASE\n            | FUNCION_SPLIT\n    \n    FUNCION_TOFIXED : id punto toFixed p_Abre EXPRESION p_Cierra\n    \n    FUNCION_TOEXPONENTIAL : id punto toExponential p_Abre EXPRESION p_Cierra\n    \n    FUNCION_TOSTRING : id punto toString p_Abre p_Cierra\n    \n    FUNCION_TOLOWERCASE : id punto toLowerCase p_Abre p_Cierra\n    \n    FUNCION_TOUPPERCASE : id punto toUpperCase p_Abre p_Cierra\n    \n    FUNCION_SPLIT : id punto split p_Abre cadena p_Cierra\n    \n    EXPRESION : cadena\n    \n    EXPRESION : numero\n    \n    EXPRESION : true\n                | false\n    \n    EXPRESION : null\n    \n    EXPRESION : id\n    \n    EXPRESION : id LISTAINDICES\n    \n    EXPRESION : c_Abre LISTAEXPRESIONES c_Cierra\n    \n    TIPO : number\n    \n    TIPO : string\n    \n    TIPO : boolean\n    \n    TIPO : any\n    '
    
_lr_action_items = {'console':([0,2,3,7,8,24,25,26,27,28,29,30,31,32,33,37,38,108,131,134,138,146,148,174,175,176,177,],[15,15,-3,-7,-8,-2,-4,-5,-6,-9,-10,-11,-12,-25,-32,-18,-19,15,15,15,15,15,15,15,15,15,15,]),'if':([0,2,3,7,8,24,25,26,27,28,29,30,31,32,33,37,38,108,131,134,138,146,148,167,174,175,176,177,],[16,16,-3,-7,-8,-2,-4,-5,-6,-9,-10,-11,-12,-25,-32,-18,-19,16,16,16,16,16,16,16,16,16,16,16,]),'while':([0,2,3,7,8,24,25,26,27,28,29,30,31,32,33,37,38,108,131,134,138,146,148,174,175,176,177,],[17,17,-3,-7,-8,-2,-4,-5,-6,-9,-10,-11,-12,-25,-32,-18,-19,17,17,17,17,17,17,17,17,17,17,]),'break':([0,2,3,7,8,24,25,26,27,28,29,30,31,32,33,37,38,108,131,134,138,146,148,174,175,176,177,],[18,18,-3,-7,-8,-2,-4,-5,-6,-9,-10,-11,-12,-25,-32,-18,-19,18,18,18,18,18,18,18,18,18,18,]),'continue':([0,2,3,7,8,24,25,26,27,28,29,30,31,32,33,37,38,108,131,134,138,146,148,174,175,176,177,],[19,19,-3,-7,-8,-2,-4,-5,-6,-9,-10,-11,-12,-25,-32,-18,-19,19,19,19,19,19,19,19,19,19,19,]),'for':([0,2,3,7,8,24,25,26,27,28,29,30,31,32,33,37,38,108,131,134,138,146,148,174,175,176,177,],[20,20,-3,-7,-8,-2,-4,-5,-6,-9,-10,-11,-12,-25,-32,-18,-19,20,20,20,20,20,20,20,20,20,20,]),'id':([0,2,3,7,8,22,23,24,25,26,27,28,29,30,31,32,33,35,36,37,38,42,44,49,50,63,67,68,71,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,96,108,130,131,134,135,138,139,140,146,147,148,165,174,175,176,177,],[21,21,-3,-7,-8,45,46,-2,-4,-5,-6,-9,-10,-11,-12,-25,-32,62,62,-18,-19,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,21,62,21,21,62,21,62,62,21,163,21,62,21,21,21,21,]),'fn':([0,2,3,7,8,24,25,26,27,28,29,30,31,32,33,37,38,108,131,134,138,146,148,174,175,176,177,],[22,22,-3,-7,-8,-2,-4,-5,-6,-9,-10,-11,-12,-25,-32,-18,-19,22,22,22,22,22,22,22,22,22,22,]),'let':([0,2,3,7,8,24,25,26,27,28,29,30,31,32,33,37,38,39,108,131,134,138,146,148,174,175,176,177,],[23,23,-3,-7,-8,-2,-4,-5,-6,-9,-10,-11,-12,-25,-32,-18,-19,23,23,23,23,23,23,23,23,23,23,23,]),'$end':([1,2,3,7,8,24,25,26,27,28,29,30,31,32,33,37,38,],[0,-1,-3,-7,-8,-2,-4,-5,-6,-9,-10,-11,-12,-25,-32,-18,-19,]),'llave_Cierra':([3,7,8,24,25,26,27,28,29,30,31,32,33,37,38,138,146,148,176,177,],[-3,-7,-8,-2,-4,-5,-6,-9,-10,-11,-12,-25,-32,-18,-19,151,158,164,178,179,]),'puntoYcoma':([4,5,6,9,10,11,12,13,14,18,19,40,41,46,51,52,53,54,55,56,57,58,59,60,61,62,65,66,89,90,91,97,99,101,102,103,104,105,106,109,110,111,112,113,114,115,116,117,118,119,120,121,122,129,132,133,137,149,150,151,154,155,156,158,164,166,168,169,170,172,173,178,179,],[25,26,27,28,29,30,31,32,33,37,38,-35,-36,-28,-58,-59,-60,-61,-62,-63,-70,-71,-72,-73,-74,-75,96,-33,-48,-51,-76,-34,-41,-26,-29,-78,-79,-80,-81,-42,-43,-44,-45,-46,-47,-49,-50,-52,-53,-54,-55,-56,-57,-77,147,-40,-37,-27,-31,-24,-66,-67,-68,-20,-13,-21,-64,-65,-69,-30,-22,-23,-14,]),'punto':([15,62,],[34,92,]),'p_Abre':([16,17,20,45,47,123,124,125,126,127,128,],[35,36,39,70,73,139,140,141,142,143,144,]),'incremento':([21,163,],[40,40,]),'decremento':([21,163,],[41,41,]),'igual':([21,43,46,99,102,103,104,105,106,133,150,163,],[42,67,71,-41,135,-78,-79,-80,-81,-40,165,42,]),'c_Abre':([21,35,36,42,43,44,49,50,62,63,67,68,71,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,91,96,99,102,103,104,105,106,130,133,135,139,140,163,165,],[44,63,63,63,68,63,63,63,44,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,68,63,-41,136,-78,-79,-80,-81,63,-40,63,63,63,44,63,]),'log':([34,],[47,]),'resta':([35,36,42,44,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,66,67,68,69,71,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,94,96,97,98,99,101,109,110,111,112,113,114,115,116,117,118,119,120,121,122,129,130,132,133,135,139,140,145,149,152,153,154,155,156,165,168,169,170,172,],[49,49,49,49,76,49,49,-58,-59,-60,-61,-62,-63,-70,-71,-72,-73,-74,-75,49,76,76,49,49,76,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-48,-51,-76,76,49,76,76,-41,76,-42,-43,-44,-45,-46,-47,76,76,-52,-53,-54,-55,-56,-57,-77,49,76,-40,49,49,49,76,76,76,76,-66,-67,-68,49,-64,-65,-69,76,]),'not':([35,36,42,44,49,50,63,67,68,71,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,96,130,135,139,140,165,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'cadena':([35,36,42,44,49,50,63,67,68,71,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,96,130,135,139,140,144,165,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,157,57,]),'numero':([35,36,42,44,49,50,63,67,68,71,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,96,130,135,139,140,165,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'true':([35,36,42,44,49,50,63,67,68,71,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,96,130,135,139,140,165,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'false':([35,36,42,44,49,50,63,67,68,71,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,96,130,135,139,140,165,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'null':([35,36,42,44,49,50,63,67,68,71,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,96,130,135,139,140,165,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'p_Cierra':([40,41,48,51,52,53,54,55,56,57,58,59,60,61,62,64,66,70,89,90,91,94,97,99,107,109,110,111,112,113,114,115,116,117,118,119,120,121,122,129,133,141,142,143,145,152,153,154,155,156,157,159,160,161,162,168,169,170,],[-35,-36,74,-58,-59,-60,-61,-62,-63,-70,-71,-72,-73,-74,-75,95,-33,100,-48,-51,-76,-39,-34,-41,137,-42,-43,-44,-45,-46,-47,-49,-50,-52,-53,-54,-55,-56,-57,-77,-40,154,155,156,-38,168,169,-66,-67,-68,170,171,-15,-16,-17,-64,-65,-69,]),'dosPuntos':([46,],[72,]),'suma':([48,51,52,53,54,55,56,57,58,59,60,61,62,64,66,69,89,90,91,94,97,98,99,101,109,110,111,112,113,114,115,116,117,118,119,120,121,122,129,132,133,145,149,152,153,154,155,156,168,169,170,172,],[75,-58,-59,-60,-61,-62,-63,-70,-71,-72,-73,-74,-75,75,75,75,-48,-51,-76,75,75,75,-41,75,-42,-43,-44,-45,-46,-47,75,75,-52,-53,-54,-55,-56,-57,-77,75,-40,75,75,75,75,-66,-67,-68,-64,-65,-69,75,]),'multiplicacion':([48,51,52,53,54,55,56,57,58,59,60,61,62,64,66,69,89,90,91,94,97,98,99,101,109,110,111,112,113,114,115,116,117,118,119,120,121,122,129,132,133,145,149,152,153,154,155,156,168,169,170,172,],[77,-58,-59,-60,-61,-62,-63,-70,-71,-72,-73,-74,-75,77,77,77,-48,-51,-76,77,77,77,-41,77,77,77,-44,-45,-46,-47,77,77,77,77,77,77,77,77,-77,77,-40,77,77,77,77,-66,-67,-68,-64,-65,-69,77,]),'division':([48,51,52,53,54,55,56,57,58,59,60,61,62,64,66,69,89,90,91,94,97,98,99,101,109,110,111,112,113,114,115,116,117,118,119,120,121,122,129,132,133,145,149,152,153,154,155,156,168,169,170,172,],[78,-58,-59,-60,-61,-62,-63,-70,-71,-72,-73,-74,-75,78,78,78,-48,-51,-76,78,78,78,-41,78,78,78,-44,-45,-46,-47,78,78,78,78,78,78,78,78,-77,78,-40,78,78,78,78,-66,-67,-68,-64,-65,-69,78,]),'potencia':([48,51,52,53,54,55,56,57,58,59,60,61,62,64,66,69,89,90,91,94,97,98,99,101,109,110,111,112,113,114,115,116,117,118,119,120,121,122,129,132,133,145,149,152,153,154,155,156,168,169,170,172,],[79,-58,-59,-60,-61,-62,-63,-70,-71,-72,-73,-74,-75,79,79,79,-48,-51,-76,79,79,79,-41,79,79,79,79,79,-46,79,79,79,79,79,79,79,79,79,-77,79,-40,79,79,79,79,-66,-67,-68,-64,-65,-69,79,]),'modulo':([48,51,52,53,54,55,56,57,58,59,60,61,62,64,66,69,89,90,91,94,97,98,99,101,109,110,111,112,113,114,115,116,117,118,119,120,121,122,129,132,133,145,149,152,153,154,155,156,168,169,170,172,],[80,-58,-59,-60,-61,-62,-63,-70,-71,-72,-73,-74,-75,80,80,80,-48,-51,-76,80,80,80,-41,80,80,80,-44,-45,-46,-47,80,80,80,80,80,80,80,80,-77,80,-40,80,80,80,80,-66,-67,-68,-64,-65,-69,80,]),'and':([48,51,52,53,54,55,56,57,58,59,60,61,62,64,66,69,89,90,91,94,97,98,99,101,109,110,111,112,113,114,115,116,117,118,119,120,121,122,129,132,133,145,149,152,153,154,155,156,168,169,170,172,],[81,-58,-59,-60,-61,-62,-63,-70,-71,-72,-73,-74,-75,81,81,81,-48,-51,-76,81,81,81,-41,81,-42,-43,-44,-45,-46,-47,-49,81,-52,-53,-54,-55,-56,-57,-77,81,-40,81,81,81,81,-66,-67,-68,-64,-65,-69,81,]),'or':([48,51,52,53,54,55,56,57,58,59,60,61,62,64,66,69,89,90,91,94,97,98,99,101,109,110,111,112,113,114,115,116,117,118,119,120,121,122,129,132,133,145,149,152,153,154,155,156,168,169,170,172,],[82,-58,-59,-60,-61,-62,-63,-70,-71,-72,-73,-74,-75,82,82,82,-48,-51,-76,82,82,82,-41,82,-42,-43,-44,-45,-46,-47,-49,-50,-52,-53,-54,-55,-56,-57,-77,82,-40,82,82,82,82,-66,-67,-68,-64,-65,-69,82,]),'mayor':([48,51,52,53,54,55,56,57,58,59,60,61,62,64,66,69,89,90,91,94,97,98,99,101,109,110,111,112,113,114,115,116,117,118,119,120,121,122,129,132,133,145,149,152,153,154,155,156,168,169,170,172,],[83,-58,-59,-60,-61,-62,-63,-70,-71,-72,-73,-74,-75,83,83,83,-48,-51,-76,83,83,83,-41,83,83,83,-44,-45,-46,-47,83,83,None,None,None,None,None,None,-77,83,-40,83,83,83,83,-66,-67,-68,-64,-65,-69,83,]),'mayorigual':([48,51,52,53,54,55,56,57,58,59,60,61,62,64,66,69,89,90,91,94,97,98,99,101,109,110,111,112,113,114,115,116,117,118,119,120,121,122,129,132,133,145,149,152,153,154,155,156,168,169,170,172,],[84,-58,-59,-60,-61,-62,-63,-70,-71,-72,-73,-74,-75,84,84,84,-48,-51,-76,84,84,84,-41,84,84,84,-44,-45,-46,-47,84,84,None,None,None,None,None,None,-77,84,-40,84,84,84,84,-66,-67,-68,-64,-65,-69,84,]),'menor':([48,51,52,53,54,55,56,57,58,59,60,61,62,64,66,69,89,90,91,94,97,98,99,101,109,110,111,112,113,114,115,116,117,118,119,120,121,122,129,132,133,145,149,152,153,154,155,156,168,169,170,172,],[85,-58,-59,-60,-61,-62,-63,-70,-71,-72,-73,-74,-75,85,85,85,-48,-51,-76,85,85,85,-41,85,85,85,-44,-45,-46,-47,85,85,None,None,None,None,None,None,-77,85,-40,85,85,85,85,-66,-67,-68,-64,-65,-69,85,]),'menorigual':([48,51,52,53,54,55,56,57,58,59,60,61,62,64,66,69,89,90,91,94,97,98,99,101,109,110,111,112,113,114,115,116,117,118,119,120,121,122,129,132,133,145,149,152,153,154,155,156,168,169,170,172,],[86,-58,-59,-60,-61,-62,-63,-70,-71,-72,-73,-74,-75,86,86,86,-48,-51,-76,86,86,86,-41,86,86,86,-44,-45,-46,-47,86,86,None,None,None,None,None,None,-77,86,-40,86,86,86,86,-66,-67,-68,-64,-65,-69,86,]),'igualacion':([48,51,52,53,54,55,56,57,58,59,60,61,62,64,66,69,89,90,91,94,97,98,99,101,109,110,111,112,113,114,115,116,117,118,119,120,121,122,129,132,133,145,149,152,153,154,155,156,168,169,170,172,],[87,-58,-59,-60,-61,-62,-63,-70,-71,-72,-73,-74,-75,87,87,87,-48,-51,-76,87,87,87,-41,87,87,87,-44,-45,-46,-47,87,87,None,None,None,None,None,None,-77,87,-40,87,87,87,87,-66,-67,-68,-64,-65,-69,87,]),'diferente':([48,51,52,53,54,55,56,57,58,59,60,61,62,64,66,69,89,90,91,94,97,98,99,101,109,110,111,112,113,114,115,116,117,118,119,120,121,122,129,132,133,145,149,152,153,154,155,156,168,169,170,172,],[88,-58,-59,-60,-61,-62,-63,-70,-71,-72,-73,-74,-75,88,88,88,-48,-51,-76,88,88,88,-41,88,88,88,-44,-45,-46,-47,88,88,None,None,None,None,None,None,-77,88,-40,88,88,88,88,-66,-67,-68,-64,-65,-69,88,]),'c_Cierra':([51,52,53,54,55,56,57,58,59,60,61,62,69,89,90,91,93,94,98,99,109,110,111,112,113,114,115,116,117,118,119,120,121,122,129,133,136,145,154,155,156,168,169,170,],[-58,-59,-60,-61,-62,-63,-70,-71,-72,-73,-74,-75,99,-48,-51,-76,129,-39,133,-41,-42,-43,-44,-45,-46,-47,-49,-50,-52,-53,-54,-55,-56,-57,-77,-40,150,-38,-66,-67,-68,-64,-65,-69,]),'coma':([51,52,53,54,55,56,57,58,59,60,61,62,89,90,91,93,94,99,107,109,110,111,112,113,114,115,116,117,118,119,120,121,122,129,133,145,154,155,156,168,169,170,],[-58,-59,-60,-61,-62,-63,-70,-71,-72,-73,-74,-75,-48,-51,-76,130,-39,-41,130,-42,-43,-44,-45,-46,-47,-49,-50,-52,-53,-54,-55,-56,-57,-77,-40,-38,-66,-67,-68,-64,-65,-69,]),'number':([72,],[103,]),'string':([72,],[104,]),'boolean':([72,],[105,]),'any':([72,],[106,]),'llave_Abre':([74,95,100,167,171,],[108,131,134,174,175,]),'toFixed':([92,],[123,]),'toExponential':([92,],[124,]),'toString':([92,],[125,]),'toLowerCase':([92,],[126,]),'toUpperCase':([92,],[127,]),'split':([92,],[128,]),'else':([151,],[167,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'INICIO':([0,],[1,]),'ENTRADAS':([0,108,131,134,174,175,],[2,138,146,148,176,177,]),'ENTRADA':([0,2,108,131,134,138,146,148,174,175,176,177,],[3,24,3,3,3,24,24,24,3,3,24,24,]),'IMPRIMIR':([0,2,108,131,134,138,146,148,174,175,176,177,],[4,4,4,4,4,4,4,4,4,4,4,4,]),'IF':([0,2,108,131,134,138,146,148,167,174,175,176,177,],[5,5,5,5,5,5,5,5,173,5,5,5,5,]),'WHILE':([0,2,108,131,134,138,146,148,174,175,176,177,],[6,6,6,6,6,6,6,6,6,6,6,6,]),'BREAK':([0,2,108,131,134,138,146,148,174,175,176,177,],[7,7,7,7,7,7,7,7,7,7,7,7,]),'CONTINUE':([0,2,108,131,134,138,146,148,174,175,176,177,],[8,8,8,8,8,8,8,8,8,8,8,8,]),'FOR':([0,2,108,131,134,138,146,148,174,175,176,177,],[9,9,9,9,9,9,9,9,9,9,9,9,]),'INCREMENTO':([0,2,108,131,134,138,146,147,148,174,175,176,177,],[10,10,10,10,10,10,10,161,10,10,10,10,10,]),'DECREMENTO':([0,2,108,131,134,138,146,147,148,174,175,176,177,],[11,11,11,11,11,11,11,162,11,11,11,11,11,]),'FUNC':([0,2,108,131,134,138,146,148,174,175,176,177,],[12,12,12,12,12,12,12,12,12,12,12,12,]),'DECLARACION':([0,2,39,108,131,134,138,146,148,174,175,176,177,],[13,13,65,13,13,13,13,13,13,13,13,13,13,]),'ASIGNACION':([0,2,108,131,134,138,146,147,148,174,175,176,177,],[14,14,14,14,14,14,14,160,14,14,14,14,14,]),'LISTAINDICES':([21,62,163,],[43,91,43,]),'EXPRESION':([35,36,42,44,49,50,63,67,68,71,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,96,130,135,139,140,165,],[48,64,66,69,89,90,94,97,98,101,94,109,110,111,112,113,114,115,116,117,118,119,120,121,122,132,145,149,152,153,172,]),'FUNCION_TOFIXED':([35,36,42,44,49,50,63,67,68,71,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,96,130,135,139,140,165,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'FUNCION_TOEXPONENTIAL':([35,36,42,44,49,50,63,67,68,71,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,96,130,135,139,140,165,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'FUNCION_TOSTRING':([35,36,42,44,49,50,63,67,68,71,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,96,130,135,139,140,165,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'FUNCION_TOLOWERCASE':([35,36,42,44,49,50,63,67,68,71,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,96,130,135,139,140,165,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'FUNCION_TOUPPERCASE':([35,36,42,44,49,50,63,67,68,71,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,96,130,135,139,140,165,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'FUNCION_SPLIT':([35,36,42,44,49,50,63,67,68,71,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,96,130,135,139,140,165,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'LISTAEXPRESIONES':([63,73,],[93,107,]),'TIPO':([72,],[102,]),'FORITERADOR':([147,],[159,]),'COMPLEMENTO_IF':([151,],[166,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> INICIO","S'",1,None,None,None),
  ('INICIO -> ENTRADAS','INICIO',1,'p_INICIO','parser.py',60),
  ('ENTRADAS -> ENTRADAS ENTRADA','ENTRADAS',2,'p_ENTRADAS_PARTE_1','parser.py',66),
  ('ENTRADAS -> ENTRADA','ENTRADAS',1,'p_ENTRADAS_PARTE_2','parser.py',73),
  ('ENTRADA -> IMPRIMIR puntoYcoma','ENTRADA',2,'p_ENTRADA','parser.py',79),
  ('ENTRADA -> IF puntoYcoma','ENTRADA',2,'p_ENTRADA','parser.py',80),
  ('ENTRADA -> WHILE puntoYcoma','ENTRADA',2,'p_ENTRADA','parser.py',81),
  ('ENTRADA -> BREAK','ENTRADA',1,'p_ENTRADA','parser.py',82),
  ('ENTRADA -> CONTINUE','ENTRADA',1,'p_ENTRADA','parser.py',83),
  ('ENTRADA -> FOR puntoYcoma','ENTRADA',2,'p_ENTRADA','parser.py',84),
  ('ENTRADA -> INCREMENTO puntoYcoma','ENTRADA',2,'p_ENTRADA','parser.py',85),
  ('ENTRADA -> DECREMENTO puntoYcoma','ENTRADA',2,'p_ENTRADA','parser.py',86),
  ('ENTRADA -> FUNC puntoYcoma','ENTRADA',2,'p_ENTRADA','parser.py',87),
  ('FUNC -> fn id p_Abre p_Cierra llave_Abre ENTRADAS llave_Cierra','FUNC',7,'p_FUNC_2','parser.py',112),
  ('FOR -> for p_Abre DECLARACION puntoYcoma EXPRESION puntoYcoma FORITERADOR p_Cierra llave_Abre ENTRADAS llave_Cierra','FOR',11,'p_FOR','parser.py',169),
  ('FORITERADOR -> ASIGNACION','FORITERADOR',1,'p_FORITERADOR','parser.py',175),
  ('FORITERADOR -> INCREMENTO','FORITERADOR',1,'p_FORITERADOR','parser.py',176),
  ('FORITERADOR -> DECREMENTO','FORITERADOR',1,'p_FORITERADOR','parser.py',177),
  ('BREAK -> break puntoYcoma','BREAK',2,'p_BREAK','parser.py',184),
  ('CONTINUE -> continue puntoYcoma','CONTINUE',2,'p_CONTINUE','parser.py',190),
  ('WHILE -> while p_Abre EXPRESION p_Cierra llave_Abre ENTRADAS llave_Cierra','WHILE',7,'p_WHILE','parser.py',197),
  ('IF -> if p_Abre EXPRESION p_Cierra llave_Abre ENTRADAS llave_Cierra COMPLEMENTO_IF','IF',8,'p_IF','parser.py',204),
  ('COMPLEMENTO_IF -> else IF','COMPLEMENTO_IF',2,'p_COMPLEMENTO_IF','parser.py',210),
  ('COMPLEMENTO_IF -> else llave_Abre ENTRADAS llave_Cierra','COMPLEMENTO_IF',4,'p_COMPLEMENTO_IF','parser.py',211),
  ('COMPLEMENTO_IF -> <empty>','COMPLEMENTO_IF',0,'p_COMPLEMENTO_IF','parser.py',212),
  ('ENTRADA -> DECLARACION puntoYcoma','ENTRADA',2,'p_ENTRADA_Declaracion','parser.py',225),
  ('DECLARACION -> let id igual EXPRESION','DECLARACION',4,'p_DECLARACION_NoTipada','parser.py',231),
  ('DECLARACION -> let id dosPuntos TIPO igual EXPRESION','DECLARACION',6,'p_DECLARACION_Tipada','parser.py',238),
  ('DECLARACION -> let id','DECLARACION',2,'p_DECLARACION_SinExpresion_SinTipado','parser.py',244),
  ('DECLARACION -> let id dosPuntos TIPO','DECLARACION',4,'p_DECLARACION_SinExpresion_Tipado','parser.py',250),
  ('DECLARACION -> let id dosPuntos TIPO c_Abre c_Cierra igual EXPRESION','DECLARACION',8,'p_DECLARACION_Tipada_VECTOR','parser.py',256),
  ('DECLARACION -> let id dosPuntos TIPO c_Abre c_Cierra','DECLARACION',6,'p_DECLARACION_SinExpresion_Tipado_VECTOR','parser.py',262),
  ('ENTRADA -> ASIGNACION puntoYcoma','ENTRADA',2,'p_ENTRADA_Asignacion','parser.py',271),
  ('ASIGNACION -> id igual EXPRESION','ASIGNACION',3,'p_ASIGNACION','parser.py',277),
  ('ASIGNACION -> id LISTAINDICES igual EXPRESION','ASIGNACION',4,'p_ASIGNACION_VEC','parser.py',283),
  ('INCREMENTO -> id incremento','INCREMENTO',2,'p_INCREMENTO','parser.py',291),
  ('DECREMENTO -> id decremento','DECREMENTO',2,'p_DECREMENTO','parser.py',297),
  ('IMPRIMIR -> console punto log p_Abre LISTAEXPRESIONES p_Cierra','IMPRIMIR',6,'p_IMPRIMIR_1','parser.py',304),
  ('LISTAEXPRESIONES -> LISTAEXPRESIONES coma EXPRESION','LISTAEXPRESIONES',3,'p_LISTAEXPRESIONES_1','parser.py',310),
  ('LISTAEXPRESIONES -> EXPRESION','LISTAEXPRESIONES',1,'p_LISTAEXPRESIONES_2','parser.py',317),
  ('LISTAINDICES -> LISTAINDICES c_Abre EXPRESION c_Cierra','LISTAINDICES',4,'p_LISTAEXPRESIONES_Indices','parser.py',323),
  ('LISTAINDICES -> c_Abre EXPRESION c_Cierra','LISTAINDICES',3,'p_LISTAEXPRESIONES_Indices_2','parser.py',330),
  ('EXPRESION -> EXPRESION suma EXPRESION','EXPRESION',3,'p_EXPRESION_suma','parser.py',338),
  ('EXPRESION -> EXPRESION resta EXPRESION','EXPRESION',3,'p_EXPRESION_resta','parser.py',345),
  ('EXPRESION -> EXPRESION multiplicacion EXPRESION','EXPRESION',3,'p_EXPRESION_multiplicacion','parser.py',352),
  ('EXPRESION -> EXPRESION division EXPRESION','EXPRESION',3,'p_EXPRESION_division','parser.py',359),
  ('EXPRESION -> EXPRESION potencia EXPRESION','EXPRESION',3,'p_EXPRESION_potencia','parser.py',366),
  ('EXPRESION -> EXPRESION modulo EXPRESION','EXPRESION',3,'p_EXPRESION_modulo','parser.py',373),
  ('EXPRESION -> resta EXPRESION','EXPRESION',2,'p_EXPRESION_negativo','parser.py',380),
  ('EXPRESION -> EXPRESION and EXPRESION','EXPRESION',3,'p_EXPRESION_and','parser.py',389),
  ('EXPRESION -> EXPRESION or EXPRESION','EXPRESION',3,'p_EXPRESION_or','parser.py',396),
  ('EXPRESION -> not EXPRESION','EXPRESION',2,'p_EXPRESION_not','parser.py',403),
  ('EXPRESION -> EXPRESION mayor EXPRESION','EXPRESION',3,'p_EXPRESION_mayor','parser.py',412),
  ('EXPRESION -> EXPRESION mayorigual EXPRESION','EXPRESION',3,'p_EXPRESION_mayorigual','parser.py',419),
  ('EXPRESION -> EXPRESION menor EXPRESION','EXPRESION',3,'p_EXPRESION_menor','parser.py',426),
  ('EXPRESION -> EXPRESION menorigual EXPRESION','EXPRESION',3,'p_EXPRESION_menorigual','parser.py',433),
  ('EXPRESION -> EXPRESION igualacion EXPRESION','EXPRESION',3,'p_EXPRESION_igualacion','parser.py',440),
  ('EXPRESION -> EXPRESION diferente EXPRESION','EXPRESION',3,'p_EXPRESION_diferente','parser.py',447),
  ('EXPRESION -> FUNCION_TOFIXED','EXPRESION',1,'p_EXPRESION_funcionesnativas','parser.py',456),
  ('EXPRESION -> FUNCION_TOEXPONENTIAL','EXPRESION',1,'p_EXPRESION_funcionesnativas','parser.py',457),
  ('EXPRESION -> FUNCION_TOSTRING','EXPRESION',1,'p_EXPRESION_funcionesnativas','parser.py',458),
  ('EXPRESION -> FUNCION_TOLOWERCASE','EXPRESION',1,'p_EXPRESION_funcionesnativas','parser.py',459),
  ('EXPRESION -> FUNCION_TOUPPERCASE','EXPRESION',1,'p_EXPRESION_funcionesnativas','parser.py',460),
  ('EXPRESION -> FUNCION_SPLIT','EXPRESION',1,'p_EXPRESION_funcionesnativas','parser.py',461),
  ('FUNCION_TOFIXED -> id punto toFixed p_Abre EXPRESION p_Cierra','FUNCION_TOFIXED',6,'p_FUNCION_TOFIXED','parser.py',467),
  ('FUNCION_TOEXPONENTIAL -> id punto toExponential p_Abre EXPRESION p_Cierra','FUNCION_TOEXPONENTIAL',6,'p_FUNCION_TOEXPONENTIAL','parser.py',474),
  ('FUNCION_TOSTRING -> id punto toString p_Abre p_Cierra','FUNCION_TOSTRING',5,'p_FUNCION_TOSTRING','parser.py',481),
  ('FUNCION_TOLOWERCASE -> id punto toLowerCase p_Abre p_Cierra','FUNCION_TOLOWERCASE',5,'p_FUNCION_TOLOWERCASE','parser.py',488),
  ('FUNCION_TOUPPERCASE -> id punto toUpperCase p_Abre p_Cierra','FUNCION_TOUPPERCASE',5,'p_FUNCION_TOUPPERCASE','parser.py',495),
  ('FUNCION_SPLIT -> id punto split p_Abre cadena p_Cierra','FUNCION_SPLIT',6,'p_FUNCION_SPLIT','parser.py',502),
  ('EXPRESION -> cadena','EXPRESION',1,'p_EXPRESION_cadena','parser.py',511),
  ('EXPRESION -> numero','EXPRESION',1,'p_EXPRESION_numero','parser.py',518),
  ('EXPRESION -> true','EXPRESION',1,'p_EXPRESION_booleano','parser.py',525),
  ('EXPRESION -> false','EXPRESION',1,'p_EXPRESION_booleano','parser.py',526),
  ('EXPRESION -> null','EXPRESION',1,'p_EXPRESION_null','parser.py',533),
  ('EXPRESION -> id','EXPRESION',1,'p_EXPRESION_Acceso','parser.py',540),
  ('EXPRESION -> id LISTAINDICES','EXPRESION',2,'p_EXPRESION_Acceso_Vector','parser.py',547),
  ('EXPRESION -> c_Abre LISTAEXPRESIONES c_Cierra','EXPRESION',3,'p_EXPRESION_Vector','parser.py',554),
  ('TIPO -> number','TIPO',1,'p_TIPO_NUMBER','parser.py',562),
  ('TIPO -> string','TIPO',1,'p_TIPO_STRING','parser.py',568),
  ('TIPO -> boolean','TIPO',1,'p_TIPO_BOOLEAN','parser.py',574),
  ('TIPO -> any','TIPO',1,'p_TIPO_ANY','parser.py',580),
]
