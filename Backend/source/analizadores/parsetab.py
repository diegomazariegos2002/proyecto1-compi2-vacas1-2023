
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftorleftandleftsumarestanonassocmenormayormenorigualmayorigualigualaciondiferenteleftmultiplicaciondivisionmoduloleftpotenciarightnotlefturestaand any boolean c_Abre c_Cierra cadena coma concat console diferente division dosPuntos false id igual igualacion let log mayor mayorigual menor menorigual modulo multiplicacion not null number numero or p_Abre p_Cierra potencia punto puntoYcoma resta split string suma toExponential toFixed toLowerCase toString toUpperCase true\n    INICIO : ENTRADAS\n    \n    ENTRADAS : ENTRADAS ENTRADA\n    \n    ENTRADAS : ENTRADA\n    \n    ENTRADA : IMPRIMIR puntoYcoma\n    \n    ENTRADA : DECLARACION puntoYcoma\n    \n    DECLARACION : let id igual EXPRESION\n    \n    DECLARACION : let id dosPuntos TIPO igual EXPRESION\n    \n    DECLARACION : let id \n    \n    DECLARACION : let id dosPuntos TIPO\n    \n    ENTRADA : ASIGNACION puntoYcoma\n    \n    ASIGNACION : id igual EXPRESION\n    \n    IMPRIMIR : console punto log p_Abre LISTAEXPRESIONES p_Cierra\n    \n    LISTAEXPRESIONES :  LISTAEXPRESIONES coma EXPRESION\n    \n    LISTAEXPRESIONES : EXPRESION\n    \n    EXPRESION : EXPRESION suma EXPRESION\n    \n    EXPRESION : EXPRESION resta EXPRESION\n    \n    EXPRESION : EXPRESION multiplicacion EXPRESION\n    \n    EXPRESION : EXPRESION division EXPRESION\n    \n    EXPRESION : EXPRESION potencia EXPRESION\n    \n    EXPRESION : EXPRESION modulo EXPRESION\n    \n    EXPRESION : resta EXPRESION %prec uresta\n    \n    EXPRESION : EXPRESION and EXPRESION\n    \n    EXPRESION : EXPRESION or EXPRESION\n    \n    EXPRESION : not EXPRESION\n    \n    EXPRESION : EXPRESION mayor EXPRESION\n    \n    EXPRESION : EXPRESION mayorigual EXPRESION\n    \n    EXPRESION : EXPRESION menor EXPRESION\n    \n    EXPRESION : EXPRESION menorigual EXPRESION\n    \n    EXPRESION : EXPRESION igualacion EXPRESION\n    \n    EXPRESION : EXPRESION diferente EXPRESION\n    \n    EXPRESION : FUNCION_TOFIXED\n            | FUNCION_TOEXPONENTIAL\n            | FUNCION_TOSTRING\n            | FUNCION_TOLOWERCASE\n            | FUNCION_TOUPPERCASE\n            | FUNCION_SPLIT\n    \n    FUNCION_TOFIXED : id punto toFixed p_Abre EXPRESION p_Cierra\n    \n    FUNCION_TOEXPONENTIAL : id punto toExponential p_Abre EXPRESION p_Cierra\n    \n    FUNCION_TOSTRING : id punto toString p_Abre p_Cierra\n    \n    FUNCION_TOLOWERCASE : id punto toLowerCase p_Abre p_Cierra\n    \n    FUNCION_TOUPPERCASE : id punto toUpperCase p_Abre p_Cierra\n    \n    FUNCION_SPLIT : id punto split p_Abre cadena p_Cierra\n    \n    EXPRESION : cadena\n    \n    EXPRESION : numero\n    \n    EXPRESION : true\n                | false\n    \n    EXPRESION : null\n    \n    EXPRESION : id\n    \n    EXPRESION : c_Abre LISTAEXPRESIONES c_Cierra\n    \n    TIPO : number\n    \n    TIPO : string\n    \n    TIPO : boolean\n    \n    TIPO : any\n    '
    
_lr_action_items = {'console':([0,2,3,10,11,12,13,],[7,7,-3,-2,-4,-5,-10,]),'let':([0,2,3,10,11,12,13,],[8,8,-3,-2,-4,-5,-10,]),'id':([0,2,3,8,10,11,12,13,16,18,22,23,35,36,44,45,46,47,48,49,50,51,52,53,54,55,56,57,63,85,88,89,],[9,9,-3,15,-2,-4,-5,-10,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'$end':([1,2,3,10,11,12,13,],[0,-1,-3,-2,-4,-5,-10,]),'puntoYcoma':([4,5,6,15,20,21,24,25,26,27,28,29,30,31,32,33,34,37,38,39,40,41,42,58,59,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,97,98,99,101,102,103,],[11,12,13,-8,-48,-11,-31,-32,-33,-34,-35,-36,-43,-44,-45,-46,-47,-6,-9,-50,-51,-52,-53,-21,-24,-15,-16,-17,-18,-19,-20,-22,-23,-25,-26,-27,-28,-29,-30,-49,-12,-7,-39,-40,-41,-37,-38,-42,]),'punto':([7,20,],[14,43,]),'igual':([9,15,38,39,40,41,42,],[16,18,63,-50,-51,-52,-53,]),'log':([14,],[17,]),'dosPuntos':([15,],[19,]),'resta':([16,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,61,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,87,88,89,94,95,96,97,98,99,101,102,103,],[22,22,-48,45,22,22,-31,-32,-33,-34,-35,-36,-43,-44,-45,-46,-47,22,22,45,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-21,-24,45,22,-15,-16,-17,-18,-19,-20,45,45,-25,-26,-27,-28,-29,-30,-49,22,45,22,22,45,45,45,-39,-40,-41,-37,-38,-42,]),'not':([16,18,22,23,35,36,44,45,46,47,48,49,50,51,52,53,54,55,56,57,63,85,88,89,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'cadena':([16,18,22,23,35,36,44,45,46,47,48,49,50,51,52,53,54,55,56,57,63,85,88,89,93,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,100,]),'numero':([16,18,22,23,35,36,44,45,46,47,48,49,50,51,52,53,54,55,56,57,63,85,88,89,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'true':([16,18,22,23,35,36,44,45,46,47,48,49,50,51,52,53,54,55,56,57,63,85,88,89,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'false':([16,18,22,23,35,36,44,45,46,47,48,49,50,51,52,53,54,55,56,57,63,85,88,89,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'null':([16,18,22,23,35,36,44,45,46,47,48,49,50,51,52,53,54,55,56,57,63,85,88,89,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'c_Abre':([16,18,22,23,35,36,44,45,46,47,48,49,50,51,52,53,54,55,56,57,63,85,88,89,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'p_Abre':([17,64,65,66,67,68,69,],[36,88,89,90,91,92,93,]),'number':([19,],[39,]),'string':([19,],[40,]),'boolean':([19,],[41,]),'any':([19,],[42,]),'suma':([20,21,24,25,26,27,28,29,30,31,32,33,34,37,58,59,61,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,87,94,95,96,97,98,99,101,102,103,],[-48,44,-31,-32,-33,-34,-35,-36,-43,-44,-45,-46,-47,44,-21,-24,44,-15,-16,-17,-18,-19,-20,44,44,-25,-26,-27,-28,-29,-30,-49,44,44,44,44,-39,-40,-41,-37,-38,-42,]),'multiplicacion':([20,21,24,25,26,27,28,29,30,31,32,33,34,37,58,59,61,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,87,94,95,96,97,98,99,101,102,103,],[-48,46,-31,-32,-33,-34,-35,-36,-43,-44,-45,-46,-47,46,-21,-24,46,46,46,-17,-18,-19,-20,46,46,46,46,46,46,46,46,-49,46,46,46,46,-39,-40,-41,-37,-38,-42,]),'division':([20,21,24,25,26,27,28,29,30,31,32,33,34,37,58,59,61,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,87,94,95,96,97,98,99,101,102,103,],[-48,47,-31,-32,-33,-34,-35,-36,-43,-44,-45,-46,-47,47,-21,-24,47,47,47,-17,-18,-19,-20,47,47,47,47,47,47,47,47,-49,47,47,47,47,-39,-40,-41,-37,-38,-42,]),'potencia':([20,21,24,25,26,27,28,29,30,31,32,33,34,37,58,59,61,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,87,94,95,96,97,98,99,101,102,103,],[-48,48,-31,-32,-33,-34,-35,-36,-43,-44,-45,-46,-47,48,-21,-24,48,48,48,48,48,-19,48,48,48,48,48,48,48,48,48,-49,48,48,48,48,-39,-40,-41,-37,-38,-42,]),'modulo':([20,21,24,25,26,27,28,29,30,31,32,33,34,37,58,59,61,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,87,94,95,96,97,98,99,101,102,103,],[-48,49,-31,-32,-33,-34,-35,-36,-43,-44,-45,-46,-47,49,-21,-24,49,49,49,-17,-18,-19,-20,49,49,49,49,49,49,49,49,-49,49,49,49,49,-39,-40,-41,-37,-38,-42,]),'and':([20,21,24,25,26,27,28,29,30,31,32,33,34,37,58,59,61,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,87,94,95,96,97,98,99,101,102,103,],[-48,50,-31,-32,-33,-34,-35,-36,-43,-44,-45,-46,-47,50,-21,-24,50,-15,-16,-17,-18,-19,-20,-22,50,-25,-26,-27,-28,-29,-30,-49,50,50,50,50,-39,-40,-41,-37,-38,-42,]),'or':([20,21,24,25,26,27,28,29,30,31,32,33,34,37,58,59,61,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,87,94,95,96,97,98,99,101,102,103,],[-48,51,-31,-32,-33,-34,-35,-36,-43,-44,-45,-46,-47,51,-21,-24,51,-15,-16,-17,-18,-19,-20,-22,-23,-25,-26,-27,-28,-29,-30,-49,51,51,51,51,-39,-40,-41,-37,-38,-42,]),'mayor':([20,21,24,25,26,27,28,29,30,31,32,33,34,37,58,59,61,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,87,94,95,96,97,98,99,101,102,103,],[-48,52,-31,-32,-33,-34,-35,-36,-43,-44,-45,-46,-47,52,-21,-24,52,52,52,-17,-18,-19,-20,52,52,None,None,None,None,None,None,-49,52,52,52,52,-39,-40,-41,-37,-38,-42,]),'mayorigual':([20,21,24,25,26,27,28,29,30,31,32,33,34,37,58,59,61,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,87,94,95,96,97,98,99,101,102,103,],[-48,53,-31,-32,-33,-34,-35,-36,-43,-44,-45,-46,-47,53,-21,-24,53,53,53,-17,-18,-19,-20,53,53,None,None,None,None,None,None,-49,53,53,53,53,-39,-40,-41,-37,-38,-42,]),'menor':([20,21,24,25,26,27,28,29,30,31,32,33,34,37,58,59,61,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,87,94,95,96,97,98,99,101,102,103,],[-48,54,-31,-32,-33,-34,-35,-36,-43,-44,-45,-46,-47,54,-21,-24,54,54,54,-17,-18,-19,-20,54,54,None,None,None,None,None,None,-49,54,54,54,54,-39,-40,-41,-37,-38,-42,]),'menorigual':([20,21,24,25,26,27,28,29,30,31,32,33,34,37,58,59,61,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,87,94,95,96,97,98,99,101,102,103,],[-48,55,-31,-32,-33,-34,-35,-36,-43,-44,-45,-46,-47,55,-21,-24,55,55,55,-17,-18,-19,-20,55,55,None,None,None,None,None,None,-49,55,55,55,55,-39,-40,-41,-37,-38,-42,]),'igualacion':([20,21,24,25,26,27,28,29,30,31,32,33,34,37,58,59,61,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,87,94,95,96,97,98,99,101,102,103,],[-48,56,-31,-32,-33,-34,-35,-36,-43,-44,-45,-46,-47,56,-21,-24,56,56,56,-17,-18,-19,-20,56,56,None,None,None,None,None,None,-49,56,56,56,56,-39,-40,-41,-37,-38,-42,]),'diferente':([20,21,24,25,26,27,28,29,30,31,32,33,34,37,58,59,61,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,87,94,95,96,97,98,99,101,102,103,],[-48,57,-31,-32,-33,-34,-35,-36,-43,-44,-45,-46,-47,57,-21,-24,57,57,57,-17,-18,-19,-20,57,57,None,None,None,None,None,None,-49,57,57,57,57,-39,-40,-41,-37,-38,-42,]),'c_Cierra':([20,24,25,26,27,28,29,30,31,32,33,34,58,59,60,61,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,94,97,98,99,101,102,103,],[-48,-31,-32,-33,-34,-35,-36,-43,-44,-45,-46,-47,-21,-24,84,-14,-15,-16,-17,-18,-19,-20,-22,-23,-25,-26,-27,-28,-29,-30,-49,-13,-39,-40,-41,-37,-38,-42,]),'coma':([20,24,25,26,27,28,29,30,31,32,33,34,58,59,60,61,62,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,94,97,98,99,101,102,103,],[-48,-31,-32,-33,-34,-35,-36,-43,-44,-45,-46,-47,-21,-24,85,-14,85,-15,-16,-17,-18,-19,-20,-22,-23,-25,-26,-27,-28,-29,-30,-49,-13,-39,-40,-41,-37,-38,-42,]),'p_Cierra':([20,24,25,26,27,28,29,30,31,32,33,34,58,59,61,62,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,90,91,92,94,95,96,97,98,99,100,101,102,103,],[-48,-31,-32,-33,-34,-35,-36,-43,-44,-45,-46,-47,-21,-24,-14,86,-15,-16,-17,-18,-19,-20,-22,-23,-25,-26,-27,-28,-29,-30,-49,97,98,99,-13,101,102,-39,-40,-41,103,-37,-38,-42,]),'toFixed':([43,],[64,]),'toExponential':([43,],[65,]),'toString':([43,],[66,]),'toLowerCase':([43,],[67,]),'toUpperCase':([43,],[68,]),'split':([43,],[69,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'INICIO':([0,],[1,]),'ENTRADAS':([0,],[2,]),'ENTRADA':([0,2,],[3,10,]),'IMPRIMIR':([0,2,],[4,4,]),'DECLARACION':([0,2,],[5,5,]),'ASIGNACION':([0,2,],[6,6,]),'EXPRESION':([16,18,22,23,35,36,44,45,46,47,48,49,50,51,52,53,54,55,56,57,63,85,88,89,],[21,37,58,59,61,61,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,94,95,96,]),'FUNCION_TOFIXED':([16,18,22,23,35,36,44,45,46,47,48,49,50,51,52,53,54,55,56,57,63,85,88,89,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'FUNCION_TOEXPONENTIAL':([16,18,22,23,35,36,44,45,46,47,48,49,50,51,52,53,54,55,56,57,63,85,88,89,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'FUNCION_TOSTRING':([16,18,22,23,35,36,44,45,46,47,48,49,50,51,52,53,54,55,56,57,63,85,88,89,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'FUNCION_TOLOWERCASE':([16,18,22,23,35,36,44,45,46,47,48,49,50,51,52,53,54,55,56,57,63,85,88,89,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'FUNCION_TOUPPERCASE':([16,18,22,23,35,36,44,45,46,47,48,49,50,51,52,53,54,55,56,57,63,85,88,89,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'FUNCION_SPLIT':([16,18,22,23,35,36,44,45,46,47,48,49,50,51,52,53,54,55,56,57,63,85,88,89,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'TIPO':([19,],[38,]),'LISTAEXPRESIONES':([35,36,],[60,62,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> INICIO","S'",1,None,None,None),
  ('INICIO -> ENTRADAS','INICIO',1,'p_INICIO','parser.py',51),
  ('ENTRADAS -> ENTRADAS ENTRADA','ENTRADAS',2,'p_ENTRADAS_PARTE_1','parser.py',57),
  ('ENTRADAS -> ENTRADA','ENTRADAS',1,'p_ENTRADAS_PARTE_2','parser.py',64),
  ('ENTRADA -> IMPRIMIR puntoYcoma','ENTRADA',2,'p_ENTRADA','parser.py',70),
  ('ENTRADA -> DECLARACION puntoYcoma','ENTRADA',2,'p_ENTRADA_Declaracion','parser.py',89),
  ('DECLARACION -> let id igual EXPRESION','DECLARACION',4,'p_DECLARACION_NoTipada','parser.py',95),
  ('DECLARACION -> let id dosPuntos TIPO igual EXPRESION','DECLARACION',6,'p_DECLARACION_Tipada','parser.py',102),
  ('DECLARACION -> let id','DECLARACION',2,'p_DECLARACION_SinExpresion_SinTipado','parser.py',108),
  ('DECLARACION -> let id dosPuntos TIPO','DECLARACION',4,'p_DECLARACION_SinExpresion_Tipado','parser.py',114),
  ('ENTRADA -> ASIGNACION puntoYcoma','ENTRADA',2,'p_ENTRADA_Asignacion','parser.py',122),
  ('ASIGNACION -> id igual EXPRESION','ASIGNACION',3,'p_ASIGNACION','parser.py',128),
  ('IMPRIMIR -> console punto log p_Abre LISTAEXPRESIONES p_Cierra','IMPRIMIR',6,'p_IMPRIMIR_1','parser.py',135),
  ('LISTAEXPRESIONES -> LISTAEXPRESIONES coma EXPRESION','LISTAEXPRESIONES',3,'p_LISTAEXPRESIONES_1','parser.py',141),
  ('LISTAEXPRESIONES -> EXPRESION','LISTAEXPRESIONES',1,'p_LISTAEXPRESIONES_2','parser.py',149),
  ('EXPRESION -> EXPRESION suma EXPRESION','EXPRESION',3,'p_EXPRESION_suma','parser.py',157),
  ('EXPRESION -> EXPRESION resta EXPRESION','EXPRESION',3,'p_EXPRESION_resta','parser.py',164),
  ('EXPRESION -> EXPRESION multiplicacion EXPRESION','EXPRESION',3,'p_EXPRESION_multiplicacion','parser.py',171),
  ('EXPRESION -> EXPRESION division EXPRESION','EXPRESION',3,'p_EXPRESION_division','parser.py',178),
  ('EXPRESION -> EXPRESION potencia EXPRESION','EXPRESION',3,'p_EXPRESION_potencia','parser.py',185),
  ('EXPRESION -> EXPRESION modulo EXPRESION','EXPRESION',3,'p_EXPRESION_modulo','parser.py',192),
  ('EXPRESION -> resta EXPRESION','EXPRESION',2,'p_EXPRESION_negativo','parser.py',199),
  ('EXPRESION -> EXPRESION and EXPRESION','EXPRESION',3,'p_EXPRESION_and','parser.py',208),
  ('EXPRESION -> EXPRESION or EXPRESION','EXPRESION',3,'p_EXPRESION_or','parser.py',215),
  ('EXPRESION -> not EXPRESION','EXPRESION',2,'p_EXPRESION_not','parser.py',222),
  ('EXPRESION -> EXPRESION mayor EXPRESION','EXPRESION',3,'p_EXPRESION_mayor','parser.py',231),
  ('EXPRESION -> EXPRESION mayorigual EXPRESION','EXPRESION',3,'p_EXPRESION_mayorigual','parser.py',238),
  ('EXPRESION -> EXPRESION menor EXPRESION','EXPRESION',3,'p_EXPRESION_menor','parser.py',245),
  ('EXPRESION -> EXPRESION menorigual EXPRESION','EXPRESION',3,'p_EXPRESION_menorigual','parser.py',252),
  ('EXPRESION -> EXPRESION igualacion EXPRESION','EXPRESION',3,'p_EXPRESION_igualacion','parser.py',259),
  ('EXPRESION -> EXPRESION diferente EXPRESION','EXPRESION',3,'p_EXPRESION_diferente','parser.py',266),
  ('EXPRESION -> FUNCION_TOFIXED','EXPRESION',1,'p_EXPRESION_funcionesnativas','parser.py',275),
  ('EXPRESION -> FUNCION_TOEXPONENTIAL','EXPRESION',1,'p_EXPRESION_funcionesnativas','parser.py',276),
  ('EXPRESION -> FUNCION_TOSTRING','EXPRESION',1,'p_EXPRESION_funcionesnativas','parser.py',277),
  ('EXPRESION -> FUNCION_TOLOWERCASE','EXPRESION',1,'p_EXPRESION_funcionesnativas','parser.py',278),
  ('EXPRESION -> FUNCION_TOUPPERCASE','EXPRESION',1,'p_EXPRESION_funcionesnativas','parser.py',279),
  ('EXPRESION -> FUNCION_SPLIT','EXPRESION',1,'p_EXPRESION_funcionesnativas','parser.py',280),
  ('FUNCION_TOFIXED -> id punto toFixed p_Abre EXPRESION p_Cierra','FUNCION_TOFIXED',6,'p_FUNCION_TOFIXED','parser.py',286),
  ('FUNCION_TOEXPONENTIAL -> id punto toExponential p_Abre EXPRESION p_Cierra','FUNCION_TOEXPONENTIAL',6,'p_FUNCION_TOEXPONENTIAL','parser.py',293),
  ('FUNCION_TOSTRING -> id punto toString p_Abre p_Cierra','FUNCION_TOSTRING',5,'p_FUNCION_TOSTRING','parser.py',300),
  ('FUNCION_TOLOWERCASE -> id punto toLowerCase p_Abre p_Cierra','FUNCION_TOLOWERCASE',5,'p_FUNCION_TOLOWERCASE','parser.py',307),
  ('FUNCION_TOUPPERCASE -> id punto toUpperCase p_Abre p_Cierra','FUNCION_TOUPPERCASE',5,'p_FUNCION_TOUPPERCASE','parser.py',314),
  ('FUNCION_SPLIT -> id punto split p_Abre cadena p_Cierra','FUNCION_SPLIT',6,'p_FUNCION_SPLIT','parser.py',321),
  ('EXPRESION -> cadena','EXPRESION',1,'p_EXPRESION_cadena','parser.py',330),
  ('EXPRESION -> numero','EXPRESION',1,'p_EXPRESION_numero','parser.py',337),
  ('EXPRESION -> true','EXPRESION',1,'p_EXPRESION_booleano','parser.py',344),
  ('EXPRESION -> false','EXPRESION',1,'p_EXPRESION_booleano','parser.py',345),
  ('EXPRESION -> null','EXPRESION',1,'p_EXPRESION_null','parser.py',352),
  ('EXPRESION -> id','EXPRESION',1,'p_EXPRESION_Acceso','parser.py',359),
  ('EXPRESION -> c_Abre LISTAEXPRESIONES c_Cierra','EXPRESION',3,'p_EXPRESION_Vector','parser.py',366),
  ('TIPO -> number','TIPO',1,'p_TIPO_NUMBER','parser.py',374),
  ('TIPO -> string','TIPO',1,'p_TIPO_STRING','parser.py',380),
  ('TIPO -> boolean','TIPO',1,'p_TIPO_BOOLEAN','parser.py',386),
  ('TIPO -> any','TIPO',1,'p_TIPO_ANY','parser.py',392),
]
