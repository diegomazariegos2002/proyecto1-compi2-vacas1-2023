
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftorleftandleftsumarestanonassocmenormayormenorigualmayorigualigualaciondiferenteleftmultiplicaciondivisionmoduloleftpotenciarightnotlefturestaand any boolean break c_Abre c_Cierra cadena coma concat console diferente division dosPuntos else false id if igual igualacion let llave_Abre llave_Cierra log mayor mayorigual menor menorigual modulo multiplicacion not null number numero or p_Abre p_Cierra potencia punto puntoYcoma resta split string suma toExponential toFixed toLowerCase toString toUpperCase true while\n    INICIO : ENTRADAS\n    \n    ENTRADAS : ENTRADAS ENTRADA\n    \n    ENTRADAS : ENTRADA\n    \n    ENTRADA : IMPRIMIR puntoYcoma\n            |   IF puntoYcoma\n            |   WHILE puntoYcoma\n            |   BREAK\n    \n    BREAK : break puntoYcoma\n    \n    WHILE : while p_Abre EXPRESION p_Cierra llave_Abre ENTRADAS llave_Cierra\n    \n    IF : if p_Abre EXPRESION p_Cierra llave_Abre ENTRADAS llave_Cierra COMPLEMENTO_IF\n    \n    COMPLEMENTO_IF : else IF\n                    | else llave_Abre ENTRADAS llave_Cierra\n                    | \n    \n    ENTRADA : DECLARACION puntoYcoma\n    \n    DECLARACION : let id igual EXPRESION\n    \n    DECLARACION : let id dosPuntos TIPO igual EXPRESION\n    \n    DECLARACION : let id \n    \n    DECLARACION : let id dosPuntos TIPO\n    \n    ENTRADA : ASIGNACION puntoYcoma\n    \n    ASIGNACION : id igual EXPRESION\n    \n    ASIGNACION : id LISTAINDICES igual EXPRESION\n    \n    IMPRIMIR : console punto log p_Abre LISTAEXPRESIONES p_Cierra\n    \n    LISTAEXPRESIONES :  LISTAEXPRESIONES coma EXPRESION\n    \n    LISTAEXPRESIONES : EXPRESION\n    \n    LISTAINDICES :  LISTAINDICES c_Abre EXPRESION c_Cierra\n    \n    LISTAINDICES : c_Abre EXPRESION c_Cierra\n    \n    EXPRESION : EXPRESION suma EXPRESION\n    \n    EXPRESION : EXPRESION resta EXPRESION\n    \n    EXPRESION : EXPRESION multiplicacion EXPRESION\n    \n    EXPRESION : EXPRESION division EXPRESION\n    \n    EXPRESION : EXPRESION potencia EXPRESION\n    \n    EXPRESION : EXPRESION modulo EXPRESION\n    \n    EXPRESION : resta EXPRESION %prec uresta\n    \n    EXPRESION : EXPRESION and EXPRESION\n    \n    EXPRESION : EXPRESION or EXPRESION\n    \n    EXPRESION : not EXPRESION\n    \n    EXPRESION : EXPRESION mayor EXPRESION\n    \n    EXPRESION : EXPRESION mayorigual EXPRESION\n    \n    EXPRESION : EXPRESION menor EXPRESION\n    \n    EXPRESION : EXPRESION menorigual EXPRESION\n    \n    EXPRESION : EXPRESION igualacion EXPRESION\n    \n    EXPRESION : EXPRESION diferente EXPRESION\n    \n    EXPRESION : FUNCION_TOFIXED\n            | FUNCION_TOEXPONENTIAL\n            | FUNCION_TOSTRING\n            | FUNCION_TOLOWERCASE\n            | FUNCION_TOUPPERCASE\n            | FUNCION_SPLIT\n    \n    FUNCION_TOFIXED : id punto toFixed p_Abre EXPRESION p_Cierra\n    \n    FUNCION_TOEXPONENTIAL : id punto toExponential p_Abre EXPRESION p_Cierra\n    \n    FUNCION_TOSTRING : id punto toString p_Abre p_Cierra\n    \n    FUNCION_TOLOWERCASE : id punto toLowerCase p_Abre p_Cierra\n    \n    FUNCION_TOUPPERCASE : id punto toUpperCase p_Abre p_Cierra\n    \n    FUNCION_SPLIT : id punto split p_Abre cadena p_Cierra\n    \n    EXPRESION : cadena\n    \n    EXPRESION : numero\n    \n    EXPRESION : true\n                | false\n    \n    EXPRESION : null\n    \n    EXPRESION : id\n    \n    EXPRESION : c_Abre LISTAEXPRESIONES c_Cierra\n    \n    TIPO : number\n    \n    TIPO : string\n    \n    TIPO : boolean\n    \n    TIPO : any\n    '
    
_lr_action_items = {'console':([0,2,3,7,16,17,18,19,20,21,25,86,109,113,121,137,138,],[10,10,-3,-7,-2,-4,-5,-6,-14,-19,-8,10,10,10,10,10,10,]),'if':([0,2,3,7,16,17,18,19,20,21,25,86,109,113,121,132,137,138,],[11,11,-3,-7,-2,-4,-5,-6,-14,-19,-8,11,11,11,11,11,11,11,]),'while':([0,2,3,7,16,17,18,19,20,21,25,86,109,113,121,137,138,],[12,12,-3,-7,-2,-4,-5,-6,-14,-19,-8,12,12,12,12,12,12,]),'break':([0,2,3,7,16,17,18,19,20,21,25,86,109,113,121,137,138,],[13,13,-3,-7,-2,-4,-5,-6,-14,-19,-8,13,13,13,13,13,13,]),'let':([0,2,3,7,16,17,18,19,20,21,25,86,109,113,121,137,138,],[14,14,-3,-7,-2,-4,-5,-6,-14,-19,-8,14,14,14,14,14,14,]),'id':([0,2,3,7,14,16,17,18,19,20,21,23,24,25,27,29,32,33,46,48,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,86,108,109,110,113,114,115,121,137,138,],[15,15,-3,-7,26,-2,-4,-5,-6,-14,-19,45,45,-8,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,15,45,15,45,15,45,45,15,15,15,]),'$end':([1,2,3,7,16,17,18,19,20,21,25,],[0,-1,-3,-7,-2,-4,-5,-6,-14,-19,-8,]),'llave_Cierra':([3,7,16,17,18,19,20,21,25,113,121,138,],[-3,-7,-2,-4,-5,-6,-14,-19,-8,123,130,139,]),'puntoYcoma':([4,5,6,8,9,13,26,34,35,36,37,38,39,40,41,42,43,44,45,50,70,71,76,77,78,79,80,81,82,87,88,89,90,91,92,93,94,95,96,97,98,99,100,107,112,122,123,126,127,128,130,131,133,134,135,136,139,],[17,18,19,20,21,25,-17,-43,-44,-45,-46,-47,-48,-55,-56,-57,-58,-59,-60,-20,-33,-36,-15,-18,-62,-63,-64,-65,-21,-27,-28,-29,-30,-31,-32,-34,-35,-37,-38,-39,-40,-41,-42,-61,-22,-16,-13,-51,-52,-53,-9,-10,-49,-50,-54,-11,-12,]),'punto':([10,45,],[22,72,]),'p_Abre':([11,12,30,101,102,103,104,105,106,],[23,24,54,114,115,116,117,118,119,]),'igual':([15,26,28,77,78,79,80,81,84,111,],[27,48,51,110,-62,-63,-64,-65,-26,-25,]),'c_Abre':([15,23,24,27,28,29,32,33,46,48,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,84,108,110,111,114,115,],[29,46,46,46,52,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-26,46,46,-25,46,46,]),'log':([22,],[30,]),'resta':([23,24,27,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,52,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,74,76,82,83,87,88,89,90,91,92,93,94,95,96,97,98,99,100,107,108,110,114,115,120,122,124,125,126,127,128,133,134,135,],[32,32,32,32,57,32,32,-43,-44,-45,-46,-47,-48,-55,-56,-57,-58,-59,-60,32,57,32,57,32,32,57,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-33,-36,57,57,57,57,-27,-28,-29,-30,-31,-32,57,57,-37,-38,-39,-40,-41,-42,-61,32,32,32,32,57,57,57,57,-51,-52,-53,-49,-50,-54,]),'not':([23,24,27,29,32,33,46,48,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,108,110,114,115,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'cadena':([23,24,27,29,32,33,46,48,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,108,110,114,115,119,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,129,]),'numero':([23,24,27,29,32,33,46,48,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,108,110,114,115,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'true':([23,24,27,29,32,33,46,48,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,108,110,114,115,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'false':([23,24,27,29,32,33,46,48,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,108,110,114,115,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'null':([23,24,27,29,32,33,46,48,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,108,110,114,115,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'dosPuntos':([26,],[49,]),'p_Cierra':([31,34,35,36,37,38,39,40,41,42,43,44,45,47,70,71,74,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,107,116,117,118,120,124,125,126,127,128,129,133,134,135,],[55,-43,-44,-45,-46,-47,-48,-55,-56,-57,-58,-59,-60,75,-33,-36,-24,112,-27,-28,-29,-30,-31,-32,-34,-35,-37,-38,-39,-40,-41,-42,-61,126,127,128,-23,133,134,-51,-52,-53,135,-49,-50,-54,]),'suma':([31,34,35,36,37,38,39,40,41,42,43,44,45,47,50,53,70,71,74,76,82,83,87,88,89,90,91,92,93,94,95,96,97,98,99,100,107,120,122,124,125,126,127,128,133,134,135,],[56,-43,-44,-45,-46,-47,-48,-55,-56,-57,-58,-59,-60,56,56,56,-33,-36,56,56,56,56,-27,-28,-29,-30,-31,-32,56,56,-37,-38,-39,-40,-41,-42,-61,56,56,56,56,-51,-52,-53,-49,-50,-54,]),'multiplicacion':([31,34,35,36,37,38,39,40,41,42,43,44,45,47,50,53,70,71,74,76,82,83,87,88,89,90,91,92,93,94,95,96,97,98,99,100,107,120,122,124,125,126,127,128,133,134,135,],[58,-43,-44,-45,-46,-47,-48,-55,-56,-57,-58,-59,-60,58,58,58,-33,-36,58,58,58,58,58,58,-29,-30,-31,-32,58,58,58,58,58,58,58,58,-61,58,58,58,58,-51,-52,-53,-49,-50,-54,]),'division':([31,34,35,36,37,38,39,40,41,42,43,44,45,47,50,53,70,71,74,76,82,83,87,88,89,90,91,92,93,94,95,96,97,98,99,100,107,120,122,124,125,126,127,128,133,134,135,],[59,-43,-44,-45,-46,-47,-48,-55,-56,-57,-58,-59,-60,59,59,59,-33,-36,59,59,59,59,59,59,-29,-30,-31,-32,59,59,59,59,59,59,59,59,-61,59,59,59,59,-51,-52,-53,-49,-50,-54,]),'potencia':([31,34,35,36,37,38,39,40,41,42,43,44,45,47,50,53,70,71,74,76,82,83,87,88,89,90,91,92,93,94,95,96,97,98,99,100,107,120,122,124,125,126,127,128,133,134,135,],[60,-43,-44,-45,-46,-47,-48,-55,-56,-57,-58,-59,-60,60,60,60,-33,-36,60,60,60,60,60,60,60,60,-31,60,60,60,60,60,60,60,60,60,-61,60,60,60,60,-51,-52,-53,-49,-50,-54,]),'modulo':([31,34,35,36,37,38,39,40,41,42,43,44,45,47,50,53,70,71,74,76,82,83,87,88,89,90,91,92,93,94,95,96,97,98,99,100,107,120,122,124,125,126,127,128,133,134,135,],[61,-43,-44,-45,-46,-47,-48,-55,-56,-57,-58,-59,-60,61,61,61,-33,-36,61,61,61,61,61,61,-29,-30,-31,-32,61,61,61,61,61,61,61,61,-61,61,61,61,61,-51,-52,-53,-49,-50,-54,]),'and':([31,34,35,36,37,38,39,40,41,42,43,44,45,47,50,53,70,71,74,76,82,83,87,88,89,90,91,92,93,94,95,96,97,98,99,100,107,120,122,124,125,126,127,128,133,134,135,],[62,-43,-44,-45,-46,-47,-48,-55,-56,-57,-58,-59,-60,62,62,62,-33,-36,62,62,62,62,-27,-28,-29,-30,-31,-32,-34,62,-37,-38,-39,-40,-41,-42,-61,62,62,62,62,-51,-52,-53,-49,-50,-54,]),'or':([31,34,35,36,37,38,39,40,41,42,43,44,45,47,50,53,70,71,74,76,82,83,87,88,89,90,91,92,93,94,95,96,97,98,99,100,107,120,122,124,125,126,127,128,133,134,135,],[63,-43,-44,-45,-46,-47,-48,-55,-56,-57,-58,-59,-60,63,63,63,-33,-36,63,63,63,63,-27,-28,-29,-30,-31,-32,-34,-35,-37,-38,-39,-40,-41,-42,-61,63,63,63,63,-51,-52,-53,-49,-50,-54,]),'mayor':([31,34,35,36,37,38,39,40,41,42,43,44,45,47,50,53,70,71,74,76,82,83,87,88,89,90,91,92,93,94,95,96,97,98,99,100,107,120,122,124,125,126,127,128,133,134,135,],[64,-43,-44,-45,-46,-47,-48,-55,-56,-57,-58,-59,-60,64,64,64,-33,-36,64,64,64,64,64,64,-29,-30,-31,-32,64,64,None,None,None,None,None,None,-61,64,64,64,64,-51,-52,-53,-49,-50,-54,]),'mayorigual':([31,34,35,36,37,38,39,40,41,42,43,44,45,47,50,53,70,71,74,76,82,83,87,88,89,90,91,92,93,94,95,96,97,98,99,100,107,120,122,124,125,126,127,128,133,134,135,],[65,-43,-44,-45,-46,-47,-48,-55,-56,-57,-58,-59,-60,65,65,65,-33,-36,65,65,65,65,65,65,-29,-30,-31,-32,65,65,None,None,None,None,None,None,-61,65,65,65,65,-51,-52,-53,-49,-50,-54,]),'menor':([31,34,35,36,37,38,39,40,41,42,43,44,45,47,50,53,70,71,74,76,82,83,87,88,89,90,91,92,93,94,95,96,97,98,99,100,107,120,122,124,125,126,127,128,133,134,135,],[66,-43,-44,-45,-46,-47,-48,-55,-56,-57,-58,-59,-60,66,66,66,-33,-36,66,66,66,66,66,66,-29,-30,-31,-32,66,66,None,None,None,None,None,None,-61,66,66,66,66,-51,-52,-53,-49,-50,-54,]),'menorigual':([31,34,35,36,37,38,39,40,41,42,43,44,45,47,50,53,70,71,74,76,82,83,87,88,89,90,91,92,93,94,95,96,97,98,99,100,107,120,122,124,125,126,127,128,133,134,135,],[67,-43,-44,-45,-46,-47,-48,-55,-56,-57,-58,-59,-60,67,67,67,-33,-36,67,67,67,67,67,67,-29,-30,-31,-32,67,67,None,None,None,None,None,None,-61,67,67,67,67,-51,-52,-53,-49,-50,-54,]),'igualacion':([31,34,35,36,37,38,39,40,41,42,43,44,45,47,50,53,70,71,74,76,82,83,87,88,89,90,91,92,93,94,95,96,97,98,99,100,107,120,122,124,125,126,127,128,133,134,135,],[68,-43,-44,-45,-46,-47,-48,-55,-56,-57,-58,-59,-60,68,68,68,-33,-36,68,68,68,68,68,68,-29,-30,-31,-32,68,68,None,None,None,None,None,None,-61,68,68,68,68,-51,-52,-53,-49,-50,-54,]),'diferente':([31,34,35,36,37,38,39,40,41,42,43,44,45,47,50,53,70,71,74,76,82,83,87,88,89,90,91,92,93,94,95,96,97,98,99,100,107,120,122,124,125,126,127,128,133,134,135,],[69,-43,-44,-45,-46,-47,-48,-55,-56,-57,-58,-59,-60,69,69,69,-33,-36,69,69,69,69,69,69,-29,-30,-31,-32,69,69,None,None,None,None,None,None,-61,69,69,69,69,-51,-52,-53,-49,-50,-54,]),'c_Cierra':([34,35,36,37,38,39,40,41,42,43,44,45,53,70,71,73,74,83,87,88,89,90,91,92,93,94,95,96,97,98,99,100,107,120,126,127,128,133,134,135,],[-43,-44,-45,-46,-47,-48,-55,-56,-57,-58,-59,-60,84,-33,-36,107,-24,111,-27,-28,-29,-30,-31,-32,-34,-35,-37,-38,-39,-40,-41,-42,-61,-23,-51,-52,-53,-49,-50,-54,]),'coma':([34,35,36,37,38,39,40,41,42,43,44,45,70,71,73,74,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,107,120,126,127,128,133,134,135,],[-43,-44,-45,-46,-47,-48,-55,-56,-57,-58,-59,-60,-33,-36,108,-24,108,-27,-28,-29,-30,-31,-32,-34,-35,-37,-38,-39,-40,-41,-42,-61,-23,-51,-52,-53,-49,-50,-54,]),'number':([49,],[78,]),'string':([49,],[79,]),'boolean':([49,],[80,]),'any':([49,],[81,]),'llave_Abre':([55,75,132,],[86,109,137,]),'toFixed':([72,],[101,]),'toExponential':([72,],[102,]),'toString':([72,],[103,]),'toLowerCase':([72,],[104,]),'toUpperCase':([72,],[105,]),'split':([72,],[106,]),'else':([123,],[132,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'INICIO':([0,],[1,]),'ENTRADAS':([0,86,109,137,],[2,113,121,138,]),'ENTRADA':([0,2,86,109,113,121,137,138,],[3,16,3,3,16,16,3,16,]),'IMPRIMIR':([0,2,86,109,113,121,137,138,],[4,4,4,4,4,4,4,4,]),'IF':([0,2,86,109,113,121,132,137,138,],[5,5,5,5,5,5,136,5,5,]),'WHILE':([0,2,86,109,113,121,137,138,],[6,6,6,6,6,6,6,6,]),'BREAK':([0,2,86,109,113,121,137,138,],[7,7,7,7,7,7,7,7,]),'DECLARACION':([0,2,86,109,113,121,137,138,],[8,8,8,8,8,8,8,8,]),'ASIGNACION':([0,2,86,109,113,121,137,138,],[9,9,9,9,9,9,9,9,]),'LISTAINDICES':([15,],[28,]),'EXPRESION':([23,24,27,29,32,33,46,48,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,108,110,114,115,],[31,47,50,53,70,71,74,76,82,83,74,87,88,89,90,91,92,93,94,95,96,97,98,99,100,120,122,124,125,]),'FUNCION_TOFIXED':([23,24,27,29,32,33,46,48,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,108,110,114,115,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'FUNCION_TOEXPONENTIAL':([23,24,27,29,32,33,46,48,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,108,110,114,115,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'FUNCION_TOSTRING':([23,24,27,29,32,33,46,48,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,108,110,114,115,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'FUNCION_TOLOWERCASE':([23,24,27,29,32,33,46,48,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,108,110,114,115,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'FUNCION_TOUPPERCASE':([23,24,27,29,32,33,46,48,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,108,110,114,115,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'FUNCION_SPLIT':([23,24,27,29,32,33,46,48,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,108,110,114,115,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'LISTAEXPRESIONES':([46,54,],[73,85,]),'TIPO':([49,],[77,]),'COMPLEMENTO_IF':([123,],[131,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> INICIO","S'",1,None,None,None),
  ('INICIO -> ENTRADAS','INICIO',1,'p_INICIO','parser.py',53),
  ('ENTRADAS -> ENTRADAS ENTRADA','ENTRADAS',2,'p_ENTRADAS_PARTE_1','parser.py',59),
  ('ENTRADAS -> ENTRADA','ENTRADAS',1,'p_ENTRADAS_PARTE_2','parser.py',66),
  ('ENTRADA -> IMPRIMIR puntoYcoma','ENTRADA',2,'p_ENTRADA','parser.py',72),
  ('ENTRADA -> IF puntoYcoma','ENTRADA',2,'p_ENTRADA','parser.py',73),
  ('ENTRADA -> WHILE puntoYcoma','ENTRADA',2,'p_ENTRADA','parser.py',74),
  ('ENTRADA -> BREAK','ENTRADA',1,'p_ENTRADA','parser.py',75),
  ('BREAK -> break puntoYcoma','BREAK',2,'p_BREAK','parser.py',93),
  ('WHILE -> while p_Abre EXPRESION p_Cierra llave_Abre ENTRADAS llave_Cierra','WHILE',7,'p_WHILE','parser.py',100),
  ('IF -> if p_Abre EXPRESION p_Cierra llave_Abre ENTRADAS llave_Cierra COMPLEMENTO_IF','IF',8,'p_IF','parser.py',107),
  ('COMPLEMENTO_IF -> else IF','COMPLEMENTO_IF',2,'p_COMPLEMENTO_IF','parser.py',113),
  ('COMPLEMENTO_IF -> else llave_Abre ENTRADAS llave_Cierra','COMPLEMENTO_IF',4,'p_COMPLEMENTO_IF','parser.py',114),
  ('COMPLEMENTO_IF -> <empty>','COMPLEMENTO_IF',0,'p_COMPLEMENTO_IF','parser.py',115),
  ('ENTRADA -> DECLARACION puntoYcoma','ENTRADA',2,'p_ENTRADA_Declaracion','parser.py',128),
  ('DECLARACION -> let id igual EXPRESION','DECLARACION',4,'p_DECLARACION_NoTipada','parser.py',134),
  ('DECLARACION -> let id dosPuntos TIPO igual EXPRESION','DECLARACION',6,'p_DECLARACION_Tipada','parser.py',141),
  ('DECLARACION -> let id','DECLARACION',2,'p_DECLARACION_SinExpresion_SinTipado','parser.py',147),
  ('DECLARACION -> let id dosPuntos TIPO','DECLARACION',4,'p_DECLARACION_SinExpresion_Tipado','parser.py',153),
  ('ENTRADA -> ASIGNACION puntoYcoma','ENTRADA',2,'p_ENTRADA_Asignacion','parser.py',161),
  ('ASIGNACION -> id igual EXPRESION','ASIGNACION',3,'p_ASIGNACION','parser.py',167),
  ('ASIGNACION -> id LISTAINDICES igual EXPRESION','ASIGNACION',4,'p_ASIGNACION_VEC','parser.py',173),
  ('IMPRIMIR -> console punto log p_Abre LISTAEXPRESIONES p_Cierra','IMPRIMIR',6,'p_IMPRIMIR_1','parser.py',180),
  ('LISTAEXPRESIONES -> LISTAEXPRESIONES coma EXPRESION','LISTAEXPRESIONES',3,'p_LISTAEXPRESIONES_1','parser.py',186),
  ('LISTAEXPRESIONES -> EXPRESION','LISTAEXPRESIONES',1,'p_LISTAEXPRESIONES_2','parser.py',194),
  ('LISTAINDICES -> LISTAINDICES c_Abre EXPRESION c_Cierra','LISTAINDICES',4,'p_LISTAEXPRESIONES_Indices','parser.py',200),
  ('LISTAINDICES -> c_Abre EXPRESION c_Cierra','LISTAINDICES',3,'p_LISTAEXPRESIONES_Indices_2','parser.py',207),
  ('EXPRESION -> EXPRESION suma EXPRESION','EXPRESION',3,'p_EXPRESION_suma','parser.py',215),
  ('EXPRESION -> EXPRESION resta EXPRESION','EXPRESION',3,'p_EXPRESION_resta','parser.py',222),
  ('EXPRESION -> EXPRESION multiplicacion EXPRESION','EXPRESION',3,'p_EXPRESION_multiplicacion','parser.py',229),
  ('EXPRESION -> EXPRESION division EXPRESION','EXPRESION',3,'p_EXPRESION_division','parser.py',236),
  ('EXPRESION -> EXPRESION potencia EXPRESION','EXPRESION',3,'p_EXPRESION_potencia','parser.py',243),
  ('EXPRESION -> EXPRESION modulo EXPRESION','EXPRESION',3,'p_EXPRESION_modulo','parser.py',250),
  ('EXPRESION -> resta EXPRESION','EXPRESION',2,'p_EXPRESION_negativo','parser.py',257),
  ('EXPRESION -> EXPRESION and EXPRESION','EXPRESION',3,'p_EXPRESION_and','parser.py',266),
  ('EXPRESION -> EXPRESION or EXPRESION','EXPRESION',3,'p_EXPRESION_or','parser.py',273),
  ('EXPRESION -> not EXPRESION','EXPRESION',2,'p_EXPRESION_not','parser.py',280),
  ('EXPRESION -> EXPRESION mayor EXPRESION','EXPRESION',3,'p_EXPRESION_mayor','parser.py',289),
  ('EXPRESION -> EXPRESION mayorigual EXPRESION','EXPRESION',3,'p_EXPRESION_mayorigual','parser.py',296),
  ('EXPRESION -> EXPRESION menor EXPRESION','EXPRESION',3,'p_EXPRESION_menor','parser.py',303),
  ('EXPRESION -> EXPRESION menorigual EXPRESION','EXPRESION',3,'p_EXPRESION_menorigual','parser.py',310),
  ('EXPRESION -> EXPRESION igualacion EXPRESION','EXPRESION',3,'p_EXPRESION_igualacion','parser.py',317),
  ('EXPRESION -> EXPRESION diferente EXPRESION','EXPRESION',3,'p_EXPRESION_diferente','parser.py',324),
  ('EXPRESION -> FUNCION_TOFIXED','EXPRESION',1,'p_EXPRESION_funcionesnativas','parser.py',333),
  ('EXPRESION -> FUNCION_TOEXPONENTIAL','EXPRESION',1,'p_EXPRESION_funcionesnativas','parser.py',334),
  ('EXPRESION -> FUNCION_TOSTRING','EXPRESION',1,'p_EXPRESION_funcionesnativas','parser.py',335),
  ('EXPRESION -> FUNCION_TOLOWERCASE','EXPRESION',1,'p_EXPRESION_funcionesnativas','parser.py',336),
  ('EXPRESION -> FUNCION_TOUPPERCASE','EXPRESION',1,'p_EXPRESION_funcionesnativas','parser.py',337),
  ('EXPRESION -> FUNCION_SPLIT','EXPRESION',1,'p_EXPRESION_funcionesnativas','parser.py',338),
  ('FUNCION_TOFIXED -> id punto toFixed p_Abre EXPRESION p_Cierra','FUNCION_TOFIXED',6,'p_FUNCION_TOFIXED','parser.py',344),
  ('FUNCION_TOEXPONENTIAL -> id punto toExponential p_Abre EXPRESION p_Cierra','FUNCION_TOEXPONENTIAL',6,'p_FUNCION_TOEXPONENTIAL','parser.py',351),
  ('FUNCION_TOSTRING -> id punto toString p_Abre p_Cierra','FUNCION_TOSTRING',5,'p_FUNCION_TOSTRING','parser.py',358),
  ('FUNCION_TOLOWERCASE -> id punto toLowerCase p_Abre p_Cierra','FUNCION_TOLOWERCASE',5,'p_FUNCION_TOLOWERCASE','parser.py',365),
  ('FUNCION_TOUPPERCASE -> id punto toUpperCase p_Abre p_Cierra','FUNCION_TOUPPERCASE',5,'p_FUNCION_TOUPPERCASE','parser.py',372),
  ('FUNCION_SPLIT -> id punto split p_Abre cadena p_Cierra','FUNCION_SPLIT',6,'p_FUNCION_SPLIT','parser.py',379),
  ('EXPRESION -> cadena','EXPRESION',1,'p_EXPRESION_cadena','parser.py',388),
  ('EXPRESION -> numero','EXPRESION',1,'p_EXPRESION_numero','parser.py',395),
  ('EXPRESION -> true','EXPRESION',1,'p_EXPRESION_booleano','parser.py',402),
  ('EXPRESION -> false','EXPRESION',1,'p_EXPRESION_booleano','parser.py',403),
  ('EXPRESION -> null','EXPRESION',1,'p_EXPRESION_null','parser.py',410),
  ('EXPRESION -> id','EXPRESION',1,'p_EXPRESION_Acceso','parser.py',417),
  ('EXPRESION -> c_Abre LISTAEXPRESIONES c_Cierra','EXPRESION',3,'p_EXPRESION_Vector','parser.py',424),
  ('TIPO -> number','TIPO',1,'p_TIPO_NUMBER','parser.py',432),
  ('TIPO -> string','TIPO',1,'p_TIPO_STRING','parser.py',438),
  ('TIPO -> boolean','TIPO',1,'p_TIPO_BOOLEAN','parser.py',444),
  ('TIPO -> any','TIPO',1,'p_TIPO_ANY','parser.py',450),
]
