
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftorleftandleftsumarestanonassocmenormayormenorigualmayorigualigualaciondiferenteleftmultiplicaciondivisionmoduloleftpotenciarightnotlefturestaand any boolean cadena coma concat console diferente division dosPuntos false id igual igualacion let log mayor mayorigual menor menorigual modulo multiplicacion not null number numero or p_Abre p_Cierra potencia punto puntoYcoma resta split string suma toExponential toFixed toLowerCase toString toUpperCase true\n    INICIO : ENTRADAS\n    \n    ENTRADAS : ENTRADAS ENTRADA\n    \n    ENTRADAS : ENTRADA\n    \n    ENTRADA : IMPRIMIR puntoYcoma\n    \n    ENTRADA : DECLARACION puntoYcoma\n    \n    DECLARACION : let id igual EXPRESION\n    \n    DECLARACION : let id dosPuntos TIPO igual EXPRESION\n    \n    ENTRADA : ASIGNACION puntoYcoma\n    \n    ASIGNACION : id igual EXPRESION\n    \n    IMPRIMIR : console punto log p_Abre LISTAEXPRESIONES p_Cierra\n    \n    LISTAEXPRESIONES :  LISTAEXPRESIONES coma EXPRESION\n    \n    LISTAEXPRESIONES : EXPRESION\n    \n    EXPRESION : EXPRESION suma EXPRESION\n    \n    EXPRESION : EXPRESION resta EXPRESION\n    \n    EXPRESION : EXPRESION multiplicacion EXPRESION\n    \n    EXPRESION : EXPRESION division EXPRESION\n    \n    EXPRESION : EXPRESION potencia EXPRESION\n    \n    EXPRESION : EXPRESION modulo EXPRESION\n    \n    EXPRESION : resta EXPRESION %prec uresta\n    \n    EXPRESION : EXPRESION and EXPRESION\n    \n    EXPRESION : EXPRESION or EXPRESION\n    \n    EXPRESION : not EXPRESION\n    \n    EXPRESION : EXPRESION mayor EXPRESION\n    \n    EXPRESION : EXPRESION mayorigual EXPRESION\n    \n    EXPRESION : EXPRESION menor EXPRESION\n    \n    EXPRESION : EXPRESION menorigual EXPRESION\n    \n    EXPRESION : EXPRESION igualacion EXPRESION\n    \n    EXPRESION : EXPRESION diferente EXPRESION\n    \n    EXPRESION : FUNCION_TOFIXED\n            | FUNCION_TOEXPONENTIAL\n            | FUNCION_TOSTRING\n            | FUNCION_TOLOWERCASE\n            | FUNCION_TOUPPERCASE\n            | FUNCION_SPLIT\n    \n    FUNCION_TOFIXED : id punto toFixed p_Abre EXPRESION p_Cierra\n    \n    FUNCION_TOEXPONENTIAL : id punto toExponential p_Abre EXPRESION p_Cierra\n    \n    FUNCION_TOSTRING : id punto toString p_Abre p_Cierra\n    \n    FUNCION_TOLOWERCASE : id punto toLowerCase p_Abre p_Cierra\n    \n    FUNCION_TOUPPERCASE : id punto toUpperCase p_Abre p_Cierra\n    \n    FUNCION_SPLIT : id punto split p_Abre cadena p_Cierra\n    \n    EXPRESION : cadena\n    \n    EXPRESION : numero\n    \n    EXPRESION : true\n                | false\n    \n    EXPRESION : null\n    \n    TIPO : number\n    \n    TIPO : string\n    \n    TIPO : boolean\n    \n    TIPO : any\n    '
    
_lr_action_items = {'console':([0,2,3,10,11,12,13,],[7,7,-3,-2,-4,-5,-8,]),'let':([0,2,3,10,11,12,13,],[8,8,-3,-2,-4,-5,-8,]),'id':([0,2,3,8,10,11,12,13,16,18,22,23,35,43,44,45,46,47,48,49,50,51,52,53,54,55,56,61,83,85,86,],[9,9,-3,15,-2,-4,-5,-8,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'$end':([1,2,3,10,11,12,13,],[0,-1,-3,-2,-4,-5,-8,]),'puntoYcoma':([4,5,6,21,24,25,26,27,28,29,30,31,32,33,34,36,57,58,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,94,95,96,98,99,100,],[11,12,13,-9,-29,-30,-31,-32,-33,-34,-41,-42,-43,-44,-45,-6,-19,-22,-13,-14,-15,-16,-17,-18,-20,-21,-23,-24,-25,-26,-27,-28,-10,-7,-37,-38,-39,-35,-36,-40,]),'punto':([7,20,],[14,42,]),'igual':([9,15,37,38,39,40,41,],[16,18,61,-46,-47,-48,-49,]),'log':([14,],[17,]),'dosPuntos':([15,],[19,]),'resta':([16,18,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,61,68,69,70,71,72,73,74,75,76,77,78,79,80,81,83,84,85,86,91,92,93,94,95,96,98,99,100,],[22,22,44,22,22,-29,-30,-31,-32,-33,-34,-41,-42,-43,-44,-45,22,44,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-19,-22,44,22,-13,-14,-15,-16,-17,-18,44,44,-23,-24,-25,-26,-27,-28,22,44,22,22,44,44,44,-37,-38,-39,-35,-36,-40,]),'not':([16,18,22,23,35,43,44,45,46,47,48,49,50,51,52,53,54,55,56,61,83,85,86,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'cadena':([16,18,22,23,35,43,44,45,46,47,48,49,50,51,52,53,54,55,56,61,83,85,86,90,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,97,]),'numero':([16,18,22,23,35,43,44,45,46,47,48,49,50,51,52,53,54,55,56,61,83,85,86,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'true':([16,18,22,23,35,43,44,45,46,47,48,49,50,51,52,53,54,55,56,61,83,85,86,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'false':([16,18,22,23,35,43,44,45,46,47,48,49,50,51,52,53,54,55,56,61,83,85,86,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'null':([16,18,22,23,35,43,44,45,46,47,48,49,50,51,52,53,54,55,56,61,83,85,86,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'p_Abre':([17,62,63,64,65,66,67,],[35,85,86,87,88,89,90,]),'number':([19,],[38,]),'string':([19,],[39,]),'boolean':([19,],[40,]),'any':([19,],[41,]),'suma':([21,24,25,26,27,28,29,30,31,32,33,34,36,57,58,60,68,69,70,71,72,73,74,75,76,77,78,79,80,81,84,91,92,93,94,95,96,98,99,100,],[43,-29,-30,-31,-32,-33,-34,-41,-42,-43,-44,-45,43,-19,-22,43,-13,-14,-15,-16,-17,-18,43,43,-23,-24,-25,-26,-27,-28,43,43,43,43,-37,-38,-39,-35,-36,-40,]),'multiplicacion':([21,24,25,26,27,28,29,30,31,32,33,34,36,57,58,60,68,69,70,71,72,73,74,75,76,77,78,79,80,81,84,91,92,93,94,95,96,98,99,100,],[45,-29,-30,-31,-32,-33,-34,-41,-42,-43,-44,-45,45,-19,-22,45,45,45,-15,-16,-17,-18,45,45,45,45,45,45,45,45,45,45,45,45,-37,-38,-39,-35,-36,-40,]),'division':([21,24,25,26,27,28,29,30,31,32,33,34,36,57,58,60,68,69,70,71,72,73,74,75,76,77,78,79,80,81,84,91,92,93,94,95,96,98,99,100,],[46,-29,-30,-31,-32,-33,-34,-41,-42,-43,-44,-45,46,-19,-22,46,46,46,-15,-16,-17,-18,46,46,46,46,46,46,46,46,46,46,46,46,-37,-38,-39,-35,-36,-40,]),'potencia':([21,24,25,26,27,28,29,30,31,32,33,34,36,57,58,60,68,69,70,71,72,73,74,75,76,77,78,79,80,81,84,91,92,93,94,95,96,98,99,100,],[47,-29,-30,-31,-32,-33,-34,-41,-42,-43,-44,-45,47,-19,-22,47,47,47,47,47,-17,47,47,47,47,47,47,47,47,47,47,47,47,47,-37,-38,-39,-35,-36,-40,]),'modulo':([21,24,25,26,27,28,29,30,31,32,33,34,36,57,58,60,68,69,70,71,72,73,74,75,76,77,78,79,80,81,84,91,92,93,94,95,96,98,99,100,],[48,-29,-30,-31,-32,-33,-34,-41,-42,-43,-44,-45,48,-19,-22,48,48,48,-15,-16,-17,-18,48,48,48,48,48,48,48,48,48,48,48,48,-37,-38,-39,-35,-36,-40,]),'and':([21,24,25,26,27,28,29,30,31,32,33,34,36,57,58,60,68,69,70,71,72,73,74,75,76,77,78,79,80,81,84,91,92,93,94,95,96,98,99,100,],[49,-29,-30,-31,-32,-33,-34,-41,-42,-43,-44,-45,49,-19,-22,49,-13,-14,-15,-16,-17,-18,-20,49,-23,-24,-25,-26,-27,-28,49,49,49,49,-37,-38,-39,-35,-36,-40,]),'or':([21,24,25,26,27,28,29,30,31,32,33,34,36,57,58,60,68,69,70,71,72,73,74,75,76,77,78,79,80,81,84,91,92,93,94,95,96,98,99,100,],[50,-29,-30,-31,-32,-33,-34,-41,-42,-43,-44,-45,50,-19,-22,50,-13,-14,-15,-16,-17,-18,-20,-21,-23,-24,-25,-26,-27,-28,50,50,50,50,-37,-38,-39,-35,-36,-40,]),'mayor':([21,24,25,26,27,28,29,30,31,32,33,34,36,57,58,60,68,69,70,71,72,73,74,75,76,77,78,79,80,81,84,91,92,93,94,95,96,98,99,100,],[51,-29,-30,-31,-32,-33,-34,-41,-42,-43,-44,-45,51,-19,-22,51,51,51,-15,-16,-17,-18,51,51,None,None,None,None,None,None,51,51,51,51,-37,-38,-39,-35,-36,-40,]),'mayorigual':([21,24,25,26,27,28,29,30,31,32,33,34,36,57,58,60,68,69,70,71,72,73,74,75,76,77,78,79,80,81,84,91,92,93,94,95,96,98,99,100,],[52,-29,-30,-31,-32,-33,-34,-41,-42,-43,-44,-45,52,-19,-22,52,52,52,-15,-16,-17,-18,52,52,None,None,None,None,None,None,52,52,52,52,-37,-38,-39,-35,-36,-40,]),'menor':([21,24,25,26,27,28,29,30,31,32,33,34,36,57,58,60,68,69,70,71,72,73,74,75,76,77,78,79,80,81,84,91,92,93,94,95,96,98,99,100,],[53,-29,-30,-31,-32,-33,-34,-41,-42,-43,-44,-45,53,-19,-22,53,53,53,-15,-16,-17,-18,53,53,None,None,None,None,None,None,53,53,53,53,-37,-38,-39,-35,-36,-40,]),'menorigual':([21,24,25,26,27,28,29,30,31,32,33,34,36,57,58,60,68,69,70,71,72,73,74,75,76,77,78,79,80,81,84,91,92,93,94,95,96,98,99,100,],[54,-29,-30,-31,-32,-33,-34,-41,-42,-43,-44,-45,54,-19,-22,54,54,54,-15,-16,-17,-18,54,54,None,None,None,None,None,None,54,54,54,54,-37,-38,-39,-35,-36,-40,]),'igualacion':([21,24,25,26,27,28,29,30,31,32,33,34,36,57,58,60,68,69,70,71,72,73,74,75,76,77,78,79,80,81,84,91,92,93,94,95,96,98,99,100,],[55,-29,-30,-31,-32,-33,-34,-41,-42,-43,-44,-45,55,-19,-22,55,55,55,-15,-16,-17,-18,55,55,None,None,None,None,None,None,55,55,55,55,-37,-38,-39,-35,-36,-40,]),'diferente':([21,24,25,26,27,28,29,30,31,32,33,34,36,57,58,60,68,69,70,71,72,73,74,75,76,77,78,79,80,81,84,91,92,93,94,95,96,98,99,100,],[56,-29,-30,-31,-32,-33,-34,-41,-42,-43,-44,-45,56,-19,-22,56,56,56,-15,-16,-17,-18,56,56,None,None,None,None,None,None,56,56,56,56,-37,-38,-39,-35,-36,-40,]),'p_Cierra':([24,25,26,27,28,29,30,31,32,33,34,57,58,59,60,68,69,70,71,72,73,74,75,76,77,78,79,80,81,87,88,89,91,92,93,94,95,96,97,98,99,100,],[-29,-30,-31,-32,-33,-34,-41,-42,-43,-44,-45,-19,-22,82,-12,-13,-14,-15,-16,-17,-18,-20,-21,-23,-24,-25,-26,-27,-28,94,95,96,-11,98,99,-37,-38,-39,100,-35,-36,-40,]),'coma':([24,25,26,27,28,29,30,31,32,33,34,57,58,59,60,68,69,70,71,72,73,74,75,76,77,78,79,80,81,91,94,95,96,98,99,100,],[-29,-30,-31,-32,-33,-34,-41,-42,-43,-44,-45,-19,-22,83,-12,-13,-14,-15,-16,-17,-18,-20,-21,-23,-24,-25,-26,-27,-28,-11,-37,-38,-39,-35,-36,-40,]),'toFixed':([42,],[62,]),'toExponential':([42,],[63,]),'toString':([42,],[64,]),'toLowerCase':([42,],[65,]),'toUpperCase':([42,],[66,]),'split':([42,],[67,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'INICIO':([0,],[1,]),'ENTRADAS':([0,],[2,]),'ENTRADA':([0,2,],[3,10,]),'IMPRIMIR':([0,2,],[4,4,]),'DECLARACION':([0,2,],[5,5,]),'ASIGNACION':([0,2,],[6,6,]),'EXPRESION':([16,18,22,23,35,43,44,45,46,47,48,49,50,51,52,53,54,55,56,61,83,85,86,],[21,36,57,58,60,68,69,70,71,72,73,74,75,76,77,78,79,80,81,84,91,92,93,]),'FUNCION_TOFIXED':([16,18,22,23,35,43,44,45,46,47,48,49,50,51,52,53,54,55,56,61,83,85,86,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'FUNCION_TOEXPONENTIAL':([16,18,22,23,35,43,44,45,46,47,48,49,50,51,52,53,54,55,56,61,83,85,86,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'FUNCION_TOSTRING':([16,18,22,23,35,43,44,45,46,47,48,49,50,51,52,53,54,55,56,61,83,85,86,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'FUNCION_TOLOWERCASE':([16,18,22,23,35,43,44,45,46,47,48,49,50,51,52,53,54,55,56,61,83,85,86,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'FUNCION_TOUPPERCASE':([16,18,22,23,35,43,44,45,46,47,48,49,50,51,52,53,54,55,56,61,83,85,86,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'FUNCION_SPLIT':([16,18,22,23,35,43,44,45,46,47,48,49,50,51,52,53,54,55,56,61,83,85,86,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'TIPO':([19,],[37,]),'LISTAEXPRESIONES':([35,],[59,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> INICIO","S'",1,None,None,None),
  ('INICIO -> ENTRADAS','INICIO',1,'p_INICIO','parser.py',44),
  ('ENTRADAS -> ENTRADAS ENTRADA','ENTRADAS',2,'p_ENTRADAS_PARTE_1','parser.py',50),
  ('ENTRADAS -> ENTRADA','ENTRADAS',1,'p_ENTRADAS_PARTE_2','parser.py',57),
  ('ENTRADA -> IMPRIMIR puntoYcoma','ENTRADA',2,'p_ENTRADA','parser.py',63),
  ('ENTRADA -> DECLARACION puntoYcoma','ENTRADA',2,'p_ENTRADA_Declaracion','parser.py',82),
  ('DECLARACION -> let id igual EXPRESION','DECLARACION',4,'p_DECLARACION_NoTipada','parser.py',88),
  ('DECLARACION -> let id dosPuntos TIPO igual EXPRESION','DECLARACION',6,'p_DECLARACION_Tipada','parser.py',96),
  ('ENTRADA -> ASIGNACION puntoYcoma','ENTRADA',2,'p_ENTRADA_Asignacion','parser.py',105),
  ('ASIGNACION -> id igual EXPRESION','ASIGNACION',3,'p_ASIGNACION','parser.py',111),
  ('IMPRIMIR -> console punto log p_Abre LISTAEXPRESIONES p_Cierra','IMPRIMIR',6,'p_IMPRIMIR_1','parser.py',119),
  ('LISTAEXPRESIONES -> LISTAEXPRESIONES coma EXPRESION','LISTAEXPRESIONES',3,'p_LISTAEXPRESIONES_1','parser.py',125),
  ('LISTAEXPRESIONES -> EXPRESION','LISTAEXPRESIONES',1,'p_LISTAEXPRESIONES_2','parser.py',133),
  ('EXPRESION -> EXPRESION suma EXPRESION','EXPRESION',3,'p_EXPRESION_suma','parser.py',141),
  ('EXPRESION -> EXPRESION resta EXPRESION','EXPRESION',3,'p_EXPRESION_resta','parser.py',148),
  ('EXPRESION -> EXPRESION multiplicacion EXPRESION','EXPRESION',3,'p_EXPRESION_multiplicacion','parser.py',155),
  ('EXPRESION -> EXPRESION division EXPRESION','EXPRESION',3,'p_EXPRESION_division','parser.py',162),
  ('EXPRESION -> EXPRESION potencia EXPRESION','EXPRESION',3,'p_EXPRESION_potencia','parser.py',169),
  ('EXPRESION -> EXPRESION modulo EXPRESION','EXPRESION',3,'p_EXPRESION_modulo','parser.py',176),
  ('EXPRESION -> resta EXPRESION','EXPRESION',2,'p_EXPRESION_negativo','parser.py',183),
  ('EXPRESION -> EXPRESION and EXPRESION','EXPRESION',3,'p_EXPRESION_and','parser.py',192),
  ('EXPRESION -> EXPRESION or EXPRESION','EXPRESION',3,'p_EXPRESION_or','parser.py',199),
  ('EXPRESION -> not EXPRESION','EXPRESION',2,'p_EXPRESION_not','parser.py',206),
  ('EXPRESION -> EXPRESION mayor EXPRESION','EXPRESION',3,'p_EXPRESION_mayor','parser.py',215),
  ('EXPRESION -> EXPRESION mayorigual EXPRESION','EXPRESION',3,'p_EXPRESION_mayorigual','parser.py',222),
  ('EXPRESION -> EXPRESION menor EXPRESION','EXPRESION',3,'p_EXPRESION_menor','parser.py',229),
  ('EXPRESION -> EXPRESION menorigual EXPRESION','EXPRESION',3,'p_EXPRESION_menorigual','parser.py',236),
  ('EXPRESION -> EXPRESION igualacion EXPRESION','EXPRESION',3,'p_EXPRESION_igualacion','parser.py',243),
  ('EXPRESION -> EXPRESION diferente EXPRESION','EXPRESION',3,'p_EXPRESION_diferente','parser.py',250),
  ('EXPRESION -> FUNCION_TOFIXED','EXPRESION',1,'p_EXPRESION_funcionesnativas','parser.py',259),
  ('EXPRESION -> FUNCION_TOEXPONENTIAL','EXPRESION',1,'p_EXPRESION_funcionesnativas','parser.py',260),
  ('EXPRESION -> FUNCION_TOSTRING','EXPRESION',1,'p_EXPRESION_funcionesnativas','parser.py',261),
  ('EXPRESION -> FUNCION_TOLOWERCASE','EXPRESION',1,'p_EXPRESION_funcionesnativas','parser.py',262),
  ('EXPRESION -> FUNCION_TOUPPERCASE','EXPRESION',1,'p_EXPRESION_funcionesnativas','parser.py',263),
  ('EXPRESION -> FUNCION_SPLIT','EXPRESION',1,'p_EXPRESION_funcionesnativas','parser.py',264),
  ('FUNCION_TOFIXED -> id punto toFixed p_Abre EXPRESION p_Cierra','FUNCION_TOFIXED',6,'p_FUNCION_TOFIXED','parser.py',270),
  ('FUNCION_TOEXPONENTIAL -> id punto toExponential p_Abre EXPRESION p_Cierra','FUNCION_TOEXPONENTIAL',6,'p_FUNCION_TOEXPONENTIAL','parser.py',276),
  ('FUNCION_TOSTRING -> id punto toString p_Abre p_Cierra','FUNCION_TOSTRING',5,'p_FUNCION_TOSTRING','parser.py',282),
  ('FUNCION_TOLOWERCASE -> id punto toLowerCase p_Abre p_Cierra','FUNCION_TOLOWERCASE',5,'p_FUNCION_TOLOWERCASE','parser.py',288),
  ('FUNCION_TOUPPERCASE -> id punto toUpperCase p_Abre p_Cierra','FUNCION_TOUPPERCASE',5,'p_FUNCION_TOUPPERCASE','parser.py',294),
  ('FUNCION_SPLIT -> id punto split p_Abre cadena p_Cierra','FUNCION_SPLIT',6,'p_FUNCION_SPLIT','parser.py',300),
  ('EXPRESION -> cadena','EXPRESION',1,'p_EXPRESION_cadena','parser.py',309),
  ('EXPRESION -> numero','EXPRESION',1,'p_EXPRESION_numero','parser.py',316),
  ('EXPRESION -> true','EXPRESION',1,'p_EXPRESION_booleano','parser.py',323),
  ('EXPRESION -> false','EXPRESION',1,'p_EXPRESION_booleano','parser.py',324),
  ('EXPRESION -> null','EXPRESION',1,'p_EXPRESION_null','parser.py',331),
  ('TIPO -> number','TIPO',1,'p_TIPO_NUMBER','parser.py',339),
  ('TIPO -> string','TIPO',1,'p_TIPO_STRING','parser.py',345),
  ('TIPO -> boolean','TIPO',1,'p_TIPO_BOOLEAN','parser.py',351),
  ('TIPO -> any','TIPO',1,'p_TIPO_ANY','parser.py',357),
]
