
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftorleftandleftsumarestanonassocmenormayormenorigualmayorigualigualaciondiferenteleftmultiplicaciondivisionmoduloleftpotenciarightnotlefturestaand any boolean break c_Abre c_Cierra cadena coma concat console continue decremento diferente division dosPuntos else false for id if igual igualacion incremento let llave_Abre llave_Cierra log mayor mayorigual menor menorigual modulo multiplicacion not null number numero or p_Abre p_Cierra potencia punto puntoYcoma resta split string suma toExponential toFixed toLowerCase toString toUpperCase true while\n    INICIO : ENTRADAS\n    \n    ENTRADAS : ENTRADAS ENTRADA\n    \n    ENTRADAS : ENTRADA\n    \n    ENTRADA : IMPRIMIR puntoYcoma\n            |   IF puntoYcoma\n            |   WHILE puntoYcoma\n            |   BREAK\n            |   CONTINUE\n            |   FOR puntoYcoma\n            |   INCREMENTO puntoYcoma\n            |   DECREMENTO puntoYcoma\n    \n    FOR : for p_Abre DECLARACION puntoYcoma EXPRESION puntoYcoma FORITERADOR p_Cierra llave_Abre ENTRADAS llave_Cierra\n    \n    FORITERADOR : ASIGNACION\n                | INCREMENTO\n                | DECREMENTO\n    \n    BREAK : break puntoYcoma\n    \n    CONTINUE : continue puntoYcoma\n    \n    WHILE : while p_Abre EXPRESION p_Cierra llave_Abre ENTRADAS llave_Cierra\n    \n    IF : if p_Abre EXPRESION p_Cierra llave_Abre ENTRADAS llave_Cierra COMPLEMENTO_IF\n    \n    COMPLEMENTO_IF : else IF\n                    | else llave_Abre ENTRADAS llave_Cierra\n                    | \n    \n    ENTRADA : DECLARACION puntoYcoma\n    \n    DECLARACION : let id igual EXPRESION\n    \n    DECLARACION : let id dosPuntos TIPO igual EXPRESION\n    \n    DECLARACION : let id \n    \n    DECLARACION : let id dosPuntos TIPO\n    \n    ENTRADA : ASIGNACION puntoYcoma\n    \n    ASIGNACION : id igual EXPRESION\n    \n    ASIGNACION : id LISTAINDICES igual EXPRESION\n    \n    INCREMENTO : id incremento \n    \n    DECREMENTO : id decremento\n    \n    IMPRIMIR : console punto log p_Abre LISTAEXPRESIONES p_Cierra\n    \n    LISTAEXPRESIONES :  LISTAEXPRESIONES coma EXPRESION\n    \n    LISTAEXPRESIONES : EXPRESION\n    \n    LISTAINDICES :  LISTAINDICES c_Abre EXPRESION c_Cierra\n    \n    LISTAINDICES : c_Abre EXPRESION c_Cierra\n    \n    EXPRESION : EXPRESION suma EXPRESION\n    \n    EXPRESION : EXPRESION resta EXPRESION\n    \n    EXPRESION : EXPRESION multiplicacion EXPRESION\n    \n    EXPRESION : EXPRESION division EXPRESION\n    \n    EXPRESION : EXPRESION potencia EXPRESION\n    \n    EXPRESION : EXPRESION modulo EXPRESION\n    \n    EXPRESION : resta EXPRESION %prec uresta\n    \n    EXPRESION : EXPRESION and EXPRESION\n    \n    EXPRESION : EXPRESION or EXPRESION\n    \n    EXPRESION : not EXPRESION\n    \n    EXPRESION : EXPRESION mayor EXPRESION\n    \n    EXPRESION : EXPRESION mayorigual EXPRESION\n    \n    EXPRESION : EXPRESION menor EXPRESION\n    \n    EXPRESION : EXPRESION menorigual EXPRESION\n    \n    EXPRESION : EXPRESION igualacion EXPRESION\n    \n    EXPRESION : EXPRESION diferente EXPRESION\n    \n    EXPRESION : FUNCION_TOFIXED\n            | FUNCION_TOEXPONENTIAL\n            | FUNCION_TOSTRING\n            | FUNCION_TOLOWERCASE\n            | FUNCION_TOUPPERCASE\n            | FUNCION_SPLIT\n    \n    FUNCION_TOFIXED : id punto toFixed p_Abre EXPRESION p_Cierra\n    \n    FUNCION_TOEXPONENTIAL : id punto toExponential p_Abre EXPRESION p_Cierra\n    \n    FUNCION_TOSTRING : id punto toString p_Abre p_Cierra\n    \n    FUNCION_TOLOWERCASE : id punto toLowerCase p_Abre p_Cierra\n    \n    FUNCION_TOUPPERCASE : id punto toUpperCase p_Abre p_Cierra\n    \n    FUNCION_SPLIT : id punto split p_Abre cadena p_Cierra\n    \n    EXPRESION : cadena\n    \n    EXPRESION : numero\n    \n    EXPRESION : true\n                | false\n    \n    EXPRESION : null\n    \n    EXPRESION : id\n    \n    EXPRESION : id LISTAINDICES\n    \n    EXPRESION : c_Abre LISTAEXPRESIONES c_Cierra\n    \n    TIPO : number\n    \n    TIPO : string\n    \n    TIPO : boolean\n    \n    TIPO : any\n    '
    
_lr_action_items = {'console':([0,2,3,7,8,22,23,24,25,26,27,28,29,30,34,35,102,125,130,138,161,162,163,164,],[14,14,-3,-7,-8,-2,-4,-5,-6,-9,-10,-11,-23,-28,-16,-17,14,14,14,14,14,14,14,14,]),'if':([0,2,3,7,8,22,23,24,25,26,27,28,29,30,34,35,102,125,130,138,155,161,162,163,164,],[15,15,-3,-7,-8,-2,-4,-5,-6,-9,-10,-11,-23,-28,-16,-17,15,15,15,15,15,15,15,15,15,]),'while':([0,2,3,7,8,22,23,24,25,26,27,28,29,30,34,35,102,125,130,138,161,162,163,164,],[16,16,-3,-7,-8,-2,-4,-5,-6,-9,-10,-11,-23,-28,-16,-17,16,16,16,16,16,16,16,16,]),'break':([0,2,3,7,8,22,23,24,25,26,27,28,29,30,34,35,102,125,130,138,161,162,163,164,],[17,17,-3,-7,-8,-2,-4,-5,-6,-9,-10,-11,-23,-28,-16,-17,17,17,17,17,17,17,17,17,]),'continue':([0,2,3,7,8,22,23,24,25,26,27,28,29,30,34,35,102,125,130,138,161,162,163,164,],[18,18,-3,-7,-8,-2,-4,-5,-6,-9,-10,-11,-23,-28,-16,-17,18,18,18,18,18,18,18,18,]),'for':([0,2,3,7,8,22,23,24,25,26,27,28,29,30,34,35,102,125,130,138,161,162,163,164,],[19,19,-3,-7,-8,-2,-4,-5,-6,-9,-10,-11,-23,-28,-16,-17,19,19,19,19,19,19,19,19,]),'id':([0,2,3,7,8,21,22,23,24,25,26,27,28,29,30,32,33,34,35,39,41,45,46,59,63,64,66,68,70,71,72,73,74,75,76,77,78,79,80,81,82,83,91,102,124,125,128,130,131,132,138,139,161,162,163,164,],[20,20,-3,-7,-8,42,-2,-4,-5,-6,-9,-10,-11,-23,-28,58,58,-16,-17,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,20,58,20,58,20,58,58,20,153,20,20,20,20,]),'let':([0,2,3,7,8,22,23,24,25,26,27,28,29,30,34,35,36,102,125,130,138,161,162,163,164,],[21,21,-3,-7,-8,-2,-4,-5,-6,-9,-10,-11,-23,-28,-16,-17,21,21,21,21,21,21,21,21,21,]),'$end':([1,2,3,7,8,22,23,24,25,26,27,28,29,30,34,35,],[0,-1,-3,-7,-8,-2,-4,-5,-6,-9,-10,-11,-23,-28,-16,-17,]),'llave_Cierra':([3,7,8,22,23,24,25,26,27,28,29,30,34,35,130,138,163,164,],[-3,-7,-8,-2,-4,-5,-6,-9,-10,-11,-23,-28,-16,-17,141,148,165,166,]),'puntoYcoma':([4,5,6,9,10,11,12,13,17,18,37,38,42,47,48,49,50,51,52,53,54,55,56,57,58,61,62,84,85,86,92,94,95,96,97,98,99,100,103,104,105,106,107,108,109,110,111,112,113,114,115,116,123,126,127,129,140,141,144,145,146,148,154,156,157,158,160,165,166,],[23,24,25,26,27,28,29,30,34,35,-31,-32,-26,-54,-55,-56,-57,-58,-59,-66,-67,-68,-69,-70,-71,91,-29,-44,-47,-72,-30,-37,-24,-27,-74,-75,-76,-77,-38,-39,-40,-41,-42,-43,-45,-46,-48,-49,-50,-51,-52,-53,-73,139,-36,-33,-25,-22,-62,-63,-64,-18,-19,-60,-61,-65,-20,-21,-12,]),'punto':([14,58,],[31,87,]),'p_Abre':([15,16,19,43,117,118,119,120,121,122,],[32,33,36,68,131,132,133,134,135,136,]),'incremento':([20,153,],[37,37,]),'decremento':([20,153,],[38,38,]),'igual':([20,40,42,94,96,97,98,99,100,127,153,],[39,63,66,-37,128,-74,-75,-76,-77,-36,39,]),'c_Abre':([20,32,33,39,40,41,45,46,58,59,63,64,66,68,70,71,72,73,74,75,76,77,78,79,80,81,82,83,86,91,94,124,127,128,131,132,153,],[41,59,59,59,64,59,59,59,41,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,64,59,-37,59,-36,59,59,59,41,]),'log':([31,],[43,]),'resta':([32,33,39,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,62,63,64,65,66,68,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,89,91,92,93,94,95,103,104,105,106,107,108,109,110,111,112,113,114,115,116,123,124,126,127,128,131,132,137,140,142,143,144,145,146,156,157,158,],[45,45,45,45,71,45,45,-54,-55,-56,-57,-58,-59,-66,-67,-68,-69,-70,-71,45,71,71,45,45,71,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-44,-47,-72,71,45,71,71,-37,71,-38,-39,-40,-41,-42,-43,71,71,-48,-49,-50,-51,-52,-53,-73,45,71,-36,45,45,45,71,71,71,71,-62,-63,-64,-60,-61,-65,]),'not':([32,33,39,41,45,46,59,63,64,66,68,70,71,72,73,74,75,76,77,78,79,80,81,82,83,91,124,128,131,132,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'cadena':([32,33,39,41,45,46,59,63,64,66,68,70,71,72,73,74,75,76,77,78,79,80,81,82,83,91,124,128,131,132,136,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,147,]),'numero':([32,33,39,41,45,46,59,63,64,66,68,70,71,72,73,74,75,76,77,78,79,80,81,82,83,91,124,128,131,132,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'true':([32,33,39,41,45,46,59,63,64,66,68,70,71,72,73,74,75,76,77,78,79,80,81,82,83,91,124,128,131,132,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'false':([32,33,39,41,45,46,59,63,64,66,68,70,71,72,73,74,75,76,77,78,79,80,81,82,83,91,124,128,131,132,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'null':([32,33,39,41,45,46,59,63,64,66,68,70,71,72,73,74,75,76,77,78,79,80,81,82,83,91,124,128,131,132,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'p_Cierra':([37,38,44,47,48,49,50,51,52,53,54,55,56,57,58,60,62,84,85,86,89,92,94,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,123,127,133,134,135,137,142,143,144,145,146,147,149,150,151,152,156,157,158,],[-31,-32,69,-54,-55,-56,-57,-58,-59,-66,-67,-68,-69,-70,-71,90,-29,-44,-47,-72,-35,-30,-37,129,-38,-39,-40,-41,-42,-43,-45,-46,-48,-49,-50,-51,-52,-53,-73,-36,144,145,146,-34,156,157,-62,-63,-64,158,159,-13,-14,-15,-60,-61,-65,]),'dosPuntos':([42,],[67,]),'suma':([44,47,48,49,50,51,52,53,54,55,56,57,58,60,62,65,84,85,86,89,92,93,94,95,103,104,105,106,107,108,109,110,111,112,113,114,115,116,123,126,127,137,140,142,143,144,145,146,156,157,158,],[70,-54,-55,-56,-57,-58,-59,-66,-67,-68,-69,-70,-71,70,70,70,-44,-47,-72,70,70,70,-37,70,-38,-39,-40,-41,-42,-43,70,70,-48,-49,-50,-51,-52,-53,-73,70,-36,70,70,70,70,-62,-63,-64,-60,-61,-65,]),'multiplicacion':([44,47,48,49,50,51,52,53,54,55,56,57,58,60,62,65,84,85,86,89,92,93,94,95,103,104,105,106,107,108,109,110,111,112,113,114,115,116,123,126,127,137,140,142,143,144,145,146,156,157,158,],[72,-54,-55,-56,-57,-58,-59,-66,-67,-68,-69,-70,-71,72,72,72,-44,-47,-72,72,72,72,-37,72,72,72,-40,-41,-42,-43,72,72,72,72,72,72,72,72,-73,72,-36,72,72,72,72,-62,-63,-64,-60,-61,-65,]),'division':([44,47,48,49,50,51,52,53,54,55,56,57,58,60,62,65,84,85,86,89,92,93,94,95,103,104,105,106,107,108,109,110,111,112,113,114,115,116,123,126,127,137,140,142,143,144,145,146,156,157,158,],[73,-54,-55,-56,-57,-58,-59,-66,-67,-68,-69,-70,-71,73,73,73,-44,-47,-72,73,73,73,-37,73,73,73,-40,-41,-42,-43,73,73,73,73,73,73,73,73,-73,73,-36,73,73,73,73,-62,-63,-64,-60,-61,-65,]),'potencia':([44,47,48,49,50,51,52,53,54,55,56,57,58,60,62,65,84,85,86,89,92,93,94,95,103,104,105,106,107,108,109,110,111,112,113,114,115,116,123,126,127,137,140,142,143,144,145,146,156,157,158,],[74,-54,-55,-56,-57,-58,-59,-66,-67,-68,-69,-70,-71,74,74,74,-44,-47,-72,74,74,74,-37,74,74,74,74,74,-42,74,74,74,74,74,74,74,74,74,-73,74,-36,74,74,74,74,-62,-63,-64,-60,-61,-65,]),'modulo':([44,47,48,49,50,51,52,53,54,55,56,57,58,60,62,65,84,85,86,89,92,93,94,95,103,104,105,106,107,108,109,110,111,112,113,114,115,116,123,126,127,137,140,142,143,144,145,146,156,157,158,],[75,-54,-55,-56,-57,-58,-59,-66,-67,-68,-69,-70,-71,75,75,75,-44,-47,-72,75,75,75,-37,75,75,75,-40,-41,-42,-43,75,75,75,75,75,75,75,75,-73,75,-36,75,75,75,75,-62,-63,-64,-60,-61,-65,]),'and':([44,47,48,49,50,51,52,53,54,55,56,57,58,60,62,65,84,85,86,89,92,93,94,95,103,104,105,106,107,108,109,110,111,112,113,114,115,116,123,126,127,137,140,142,143,144,145,146,156,157,158,],[76,-54,-55,-56,-57,-58,-59,-66,-67,-68,-69,-70,-71,76,76,76,-44,-47,-72,76,76,76,-37,76,-38,-39,-40,-41,-42,-43,-45,76,-48,-49,-50,-51,-52,-53,-73,76,-36,76,76,76,76,-62,-63,-64,-60,-61,-65,]),'or':([44,47,48,49,50,51,52,53,54,55,56,57,58,60,62,65,84,85,86,89,92,93,94,95,103,104,105,106,107,108,109,110,111,112,113,114,115,116,123,126,127,137,140,142,143,144,145,146,156,157,158,],[77,-54,-55,-56,-57,-58,-59,-66,-67,-68,-69,-70,-71,77,77,77,-44,-47,-72,77,77,77,-37,77,-38,-39,-40,-41,-42,-43,-45,-46,-48,-49,-50,-51,-52,-53,-73,77,-36,77,77,77,77,-62,-63,-64,-60,-61,-65,]),'mayor':([44,47,48,49,50,51,52,53,54,55,56,57,58,60,62,65,84,85,86,89,92,93,94,95,103,104,105,106,107,108,109,110,111,112,113,114,115,116,123,126,127,137,140,142,143,144,145,146,156,157,158,],[78,-54,-55,-56,-57,-58,-59,-66,-67,-68,-69,-70,-71,78,78,78,-44,-47,-72,78,78,78,-37,78,78,78,-40,-41,-42,-43,78,78,None,None,None,None,None,None,-73,78,-36,78,78,78,78,-62,-63,-64,-60,-61,-65,]),'mayorigual':([44,47,48,49,50,51,52,53,54,55,56,57,58,60,62,65,84,85,86,89,92,93,94,95,103,104,105,106,107,108,109,110,111,112,113,114,115,116,123,126,127,137,140,142,143,144,145,146,156,157,158,],[79,-54,-55,-56,-57,-58,-59,-66,-67,-68,-69,-70,-71,79,79,79,-44,-47,-72,79,79,79,-37,79,79,79,-40,-41,-42,-43,79,79,None,None,None,None,None,None,-73,79,-36,79,79,79,79,-62,-63,-64,-60,-61,-65,]),'menor':([44,47,48,49,50,51,52,53,54,55,56,57,58,60,62,65,84,85,86,89,92,93,94,95,103,104,105,106,107,108,109,110,111,112,113,114,115,116,123,126,127,137,140,142,143,144,145,146,156,157,158,],[80,-54,-55,-56,-57,-58,-59,-66,-67,-68,-69,-70,-71,80,80,80,-44,-47,-72,80,80,80,-37,80,80,80,-40,-41,-42,-43,80,80,None,None,None,None,None,None,-73,80,-36,80,80,80,80,-62,-63,-64,-60,-61,-65,]),'menorigual':([44,47,48,49,50,51,52,53,54,55,56,57,58,60,62,65,84,85,86,89,92,93,94,95,103,104,105,106,107,108,109,110,111,112,113,114,115,116,123,126,127,137,140,142,143,144,145,146,156,157,158,],[81,-54,-55,-56,-57,-58,-59,-66,-67,-68,-69,-70,-71,81,81,81,-44,-47,-72,81,81,81,-37,81,81,81,-40,-41,-42,-43,81,81,None,None,None,None,None,None,-73,81,-36,81,81,81,81,-62,-63,-64,-60,-61,-65,]),'igualacion':([44,47,48,49,50,51,52,53,54,55,56,57,58,60,62,65,84,85,86,89,92,93,94,95,103,104,105,106,107,108,109,110,111,112,113,114,115,116,123,126,127,137,140,142,143,144,145,146,156,157,158,],[82,-54,-55,-56,-57,-58,-59,-66,-67,-68,-69,-70,-71,82,82,82,-44,-47,-72,82,82,82,-37,82,82,82,-40,-41,-42,-43,82,82,None,None,None,None,None,None,-73,82,-36,82,82,82,82,-62,-63,-64,-60,-61,-65,]),'diferente':([44,47,48,49,50,51,52,53,54,55,56,57,58,60,62,65,84,85,86,89,92,93,94,95,103,104,105,106,107,108,109,110,111,112,113,114,115,116,123,126,127,137,140,142,143,144,145,146,156,157,158,],[83,-54,-55,-56,-57,-58,-59,-66,-67,-68,-69,-70,-71,83,83,83,-44,-47,-72,83,83,83,-37,83,83,83,-40,-41,-42,-43,83,83,None,None,None,None,None,None,-73,83,-36,83,83,83,83,-62,-63,-64,-60,-61,-65,]),'c_Cierra':([47,48,49,50,51,52,53,54,55,56,57,58,65,84,85,86,88,89,93,94,103,104,105,106,107,108,109,110,111,112,113,114,115,116,123,127,137,144,145,146,156,157,158,],[-54,-55,-56,-57,-58,-59,-66,-67,-68,-69,-70,-71,94,-44,-47,-72,123,-35,127,-37,-38,-39,-40,-41,-42,-43,-45,-46,-48,-49,-50,-51,-52,-53,-73,-36,-34,-62,-63,-64,-60,-61,-65,]),'coma':([47,48,49,50,51,52,53,54,55,56,57,58,84,85,86,88,89,94,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,123,127,137,144,145,146,156,157,158,],[-54,-55,-56,-57,-58,-59,-66,-67,-68,-69,-70,-71,-44,-47,-72,124,-35,-37,124,-38,-39,-40,-41,-42,-43,-45,-46,-48,-49,-50,-51,-52,-53,-73,-36,-34,-62,-63,-64,-60,-61,-65,]),'number':([67,],[97,]),'string':([67,],[98,]),'boolean':([67,],[99,]),'any':([67,],[100,]),'llave_Abre':([69,90,155,159,],[102,125,161,162,]),'toFixed':([87,],[117,]),'toExponential':([87,],[118,]),'toString':([87,],[119,]),'toLowerCase':([87,],[120,]),'toUpperCase':([87,],[121,]),'split':([87,],[122,]),'else':([141,],[155,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'INICIO':([0,],[1,]),'ENTRADAS':([0,102,125,161,162,],[2,130,138,163,164,]),'ENTRADA':([0,2,102,125,130,138,161,162,163,164,],[3,22,3,3,22,22,3,3,22,22,]),'IMPRIMIR':([0,2,102,125,130,138,161,162,163,164,],[4,4,4,4,4,4,4,4,4,4,]),'IF':([0,2,102,125,130,138,155,161,162,163,164,],[5,5,5,5,5,5,160,5,5,5,5,]),'WHILE':([0,2,102,125,130,138,161,162,163,164,],[6,6,6,6,6,6,6,6,6,6,]),'BREAK':([0,2,102,125,130,138,161,162,163,164,],[7,7,7,7,7,7,7,7,7,7,]),'CONTINUE':([0,2,102,125,130,138,161,162,163,164,],[8,8,8,8,8,8,8,8,8,8,]),'FOR':([0,2,102,125,130,138,161,162,163,164,],[9,9,9,9,9,9,9,9,9,9,]),'INCREMENTO':([0,2,102,125,130,138,139,161,162,163,164,],[10,10,10,10,10,10,151,10,10,10,10,]),'DECREMENTO':([0,2,102,125,130,138,139,161,162,163,164,],[11,11,11,11,11,11,152,11,11,11,11,]),'DECLARACION':([0,2,36,102,125,130,138,161,162,163,164,],[12,12,61,12,12,12,12,12,12,12,12,]),'ASIGNACION':([0,2,102,125,130,138,139,161,162,163,164,],[13,13,13,13,13,13,150,13,13,13,13,]),'LISTAINDICES':([20,58,153,],[40,86,40,]),'EXPRESION':([32,33,39,41,45,46,59,63,64,66,68,70,71,72,73,74,75,76,77,78,79,80,81,82,83,91,124,128,131,132,],[44,60,62,65,84,85,89,92,93,95,89,103,104,105,106,107,108,109,110,111,112,113,114,115,116,126,137,140,142,143,]),'FUNCION_TOFIXED':([32,33,39,41,45,46,59,63,64,66,68,70,71,72,73,74,75,76,77,78,79,80,81,82,83,91,124,128,131,132,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'FUNCION_TOEXPONENTIAL':([32,33,39,41,45,46,59,63,64,66,68,70,71,72,73,74,75,76,77,78,79,80,81,82,83,91,124,128,131,132,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'FUNCION_TOSTRING':([32,33,39,41,45,46,59,63,64,66,68,70,71,72,73,74,75,76,77,78,79,80,81,82,83,91,124,128,131,132,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'FUNCION_TOLOWERCASE':([32,33,39,41,45,46,59,63,64,66,68,70,71,72,73,74,75,76,77,78,79,80,81,82,83,91,124,128,131,132,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'FUNCION_TOUPPERCASE':([32,33,39,41,45,46,59,63,64,66,68,70,71,72,73,74,75,76,77,78,79,80,81,82,83,91,124,128,131,132,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'FUNCION_SPLIT':([32,33,39,41,45,46,59,63,64,66,68,70,71,72,73,74,75,76,77,78,79,80,81,82,83,91,124,128,131,132,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'LISTAEXPRESIONES':([59,68,],[88,101,]),'TIPO':([67,],[96,]),'FORITERADOR':([139,],[149,]),'COMPLEMENTO_IF':([141,],[154,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> INICIO","S'",1,None,None,None),
  ('INICIO -> ENTRADAS','INICIO',1,'p_INICIO','parser.py',59),
  ('ENTRADAS -> ENTRADAS ENTRADA','ENTRADAS',2,'p_ENTRADAS_PARTE_1','parser.py',65),
  ('ENTRADAS -> ENTRADA','ENTRADAS',1,'p_ENTRADAS_PARTE_2','parser.py',72),
  ('ENTRADA -> IMPRIMIR puntoYcoma','ENTRADA',2,'p_ENTRADA','parser.py',78),
  ('ENTRADA -> IF puntoYcoma','ENTRADA',2,'p_ENTRADA','parser.py',79),
  ('ENTRADA -> WHILE puntoYcoma','ENTRADA',2,'p_ENTRADA','parser.py',80),
  ('ENTRADA -> BREAK','ENTRADA',1,'p_ENTRADA','parser.py',81),
  ('ENTRADA -> CONTINUE','ENTRADA',1,'p_ENTRADA','parser.py',82),
  ('ENTRADA -> FOR puntoYcoma','ENTRADA',2,'p_ENTRADA','parser.py',83),
  ('ENTRADA -> INCREMENTO puntoYcoma','ENTRADA',2,'p_ENTRADA','parser.py',84),
  ('ENTRADA -> DECREMENTO puntoYcoma','ENTRADA',2,'p_ENTRADA','parser.py',85),
  ('FOR -> for p_Abre DECLARACION puntoYcoma EXPRESION puntoYcoma FORITERADOR p_Cierra llave_Abre ENTRADAS llave_Cierra','FOR',11,'p_FOR','parser.py',103),
  ('FORITERADOR -> ASIGNACION','FORITERADOR',1,'p_FORITERADOR','parser.py',109),
  ('FORITERADOR -> INCREMENTO','FORITERADOR',1,'p_FORITERADOR','parser.py',110),
  ('FORITERADOR -> DECREMENTO','FORITERADOR',1,'p_FORITERADOR','parser.py',111),
  ('BREAK -> break puntoYcoma','BREAK',2,'p_BREAK','parser.py',118),
  ('CONTINUE -> continue puntoYcoma','CONTINUE',2,'p_CONTINUE','parser.py',124),
  ('WHILE -> while p_Abre EXPRESION p_Cierra llave_Abre ENTRADAS llave_Cierra','WHILE',7,'p_WHILE','parser.py',131),
  ('IF -> if p_Abre EXPRESION p_Cierra llave_Abre ENTRADAS llave_Cierra COMPLEMENTO_IF','IF',8,'p_IF','parser.py',138),
  ('COMPLEMENTO_IF -> else IF','COMPLEMENTO_IF',2,'p_COMPLEMENTO_IF','parser.py',144),
  ('COMPLEMENTO_IF -> else llave_Abre ENTRADAS llave_Cierra','COMPLEMENTO_IF',4,'p_COMPLEMENTO_IF','parser.py',145),
  ('COMPLEMENTO_IF -> <empty>','COMPLEMENTO_IF',0,'p_COMPLEMENTO_IF','parser.py',146),
  ('ENTRADA -> DECLARACION puntoYcoma','ENTRADA',2,'p_ENTRADA_Declaracion','parser.py',159),
  ('DECLARACION -> let id igual EXPRESION','DECLARACION',4,'p_DECLARACION_NoTipada','parser.py',165),
  ('DECLARACION -> let id dosPuntos TIPO igual EXPRESION','DECLARACION',6,'p_DECLARACION_Tipada','parser.py',172),
  ('DECLARACION -> let id','DECLARACION',2,'p_DECLARACION_SinExpresion_SinTipado','parser.py',178),
  ('DECLARACION -> let id dosPuntos TIPO','DECLARACION',4,'p_DECLARACION_SinExpresion_Tipado','parser.py',184),
  ('ENTRADA -> ASIGNACION puntoYcoma','ENTRADA',2,'p_ENTRADA_Asignacion','parser.py',192),
  ('ASIGNACION -> id igual EXPRESION','ASIGNACION',3,'p_ASIGNACION','parser.py',198),
  ('ASIGNACION -> id LISTAINDICES igual EXPRESION','ASIGNACION',4,'p_ASIGNACION_VEC','parser.py',204),
  ('INCREMENTO -> id incremento','INCREMENTO',2,'p_INCREMENTO','parser.py',212),
  ('DECREMENTO -> id decremento','DECREMENTO',2,'p_DECREMENTO','parser.py',218),
  ('IMPRIMIR -> console punto log p_Abre LISTAEXPRESIONES p_Cierra','IMPRIMIR',6,'p_IMPRIMIR_1','parser.py',225),
  ('LISTAEXPRESIONES -> LISTAEXPRESIONES coma EXPRESION','LISTAEXPRESIONES',3,'p_LISTAEXPRESIONES_1','parser.py',231),
  ('LISTAEXPRESIONES -> EXPRESION','LISTAEXPRESIONES',1,'p_LISTAEXPRESIONES_2','parser.py',239),
  ('LISTAINDICES -> LISTAINDICES c_Abre EXPRESION c_Cierra','LISTAINDICES',4,'p_LISTAEXPRESIONES_Indices','parser.py',245),
  ('LISTAINDICES -> c_Abre EXPRESION c_Cierra','LISTAINDICES',3,'p_LISTAEXPRESIONES_Indices_2','parser.py',252),
  ('EXPRESION -> EXPRESION suma EXPRESION','EXPRESION',3,'p_EXPRESION_suma','parser.py',260),
  ('EXPRESION -> EXPRESION resta EXPRESION','EXPRESION',3,'p_EXPRESION_resta','parser.py',267),
  ('EXPRESION -> EXPRESION multiplicacion EXPRESION','EXPRESION',3,'p_EXPRESION_multiplicacion','parser.py',274),
  ('EXPRESION -> EXPRESION division EXPRESION','EXPRESION',3,'p_EXPRESION_division','parser.py',281),
  ('EXPRESION -> EXPRESION potencia EXPRESION','EXPRESION',3,'p_EXPRESION_potencia','parser.py',288),
  ('EXPRESION -> EXPRESION modulo EXPRESION','EXPRESION',3,'p_EXPRESION_modulo','parser.py',295),
  ('EXPRESION -> resta EXPRESION','EXPRESION',2,'p_EXPRESION_negativo','parser.py',302),
  ('EXPRESION -> EXPRESION and EXPRESION','EXPRESION',3,'p_EXPRESION_and','parser.py',311),
  ('EXPRESION -> EXPRESION or EXPRESION','EXPRESION',3,'p_EXPRESION_or','parser.py',318),
  ('EXPRESION -> not EXPRESION','EXPRESION',2,'p_EXPRESION_not','parser.py',325),
  ('EXPRESION -> EXPRESION mayor EXPRESION','EXPRESION',3,'p_EXPRESION_mayor','parser.py',334),
  ('EXPRESION -> EXPRESION mayorigual EXPRESION','EXPRESION',3,'p_EXPRESION_mayorigual','parser.py',341),
  ('EXPRESION -> EXPRESION menor EXPRESION','EXPRESION',3,'p_EXPRESION_menor','parser.py',348),
  ('EXPRESION -> EXPRESION menorigual EXPRESION','EXPRESION',3,'p_EXPRESION_menorigual','parser.py',355),
  ('EXPRESION -> EXPRESION igualacion EXPRESION','EXPRESION',3,'p_EXPRESION_igualacion','parser.py',362),
  ('EXPRESION -> EXPRESION diferente EXPRESION','EXPRESION',3,'p_EXPRESION_diferente','parser.py',369),
  ('EXPRESION -> FUNCION_TOFIXED','EXPRESION',1,'p_EXPRESION_funcionesnativas','parser.py',378),
  ('EXPRESION -> FUNCION_TOEXPONENTIAL','EXPRESION',1,'p_EXPRESION_funcionesnativas','parser.py',379),
  ('EXPRESION -> FUNCION_TOSTRING','EXPRESION',1,'p_EXPRESION_funcionesnativas','parser.py',380),
  ('EXPRESION -> FUNCION_TOLOWERCASE','EXPRESION',1,'p_EXPRESION_funcionesnativas','parser.py',381),
  ('EXPRESION -> FUNCION_TOUPPERCASE','EXPRESION',1,'p_EXPRESION_funcionesnativas','parser.py',382),
  ('EXPRESION -> FUNCION_SPLIT','EXPRESION',1,'p_EXPRESION_funcionesnativas','parser.py',383),
  ('FUNCION_TOFIXED -> id punto toFixed p_Abre EXPRESION p_Cierra','FUNCION_TOFIXED',6,'p_FUNCION_TOFIXED','parser.py',389),
  ('FUNCION_TOEXPONENTIAL -> id punto toExponential p_Abre EXPRESION p_Cierra','FUNCION_TOEXPONENTIAL',6,'p_FUNCION_TOEXPONENTIAL','parser.py',396),
  ('FUNCION_TOSTRING -> id punto toString p_Abre p_Cierra','FUNCION_TOSTRING',5,'p_FUNCION_TOSTRING','parser.py',403),
  ('FUNCION_TOLOWERCASE -> id punto toLowerCase p_Abre p_Cierra','FUNCION_TOLOWERCASE',5,'p_FUNCION_TOLOWERCASE','parser.py',410),
  ('FUNCION_TOUPPERCASE -> id punto toUpperCase p_Abre p_Cierra','FUNCION_TOUPPERCASE',5,'p_FUNCION_TOUPPERCASE','parser.py',417),
  ('FUNCION_SPLIT -> id punto split p_Abre cadena p_Cierra','FUNCION_SPLIT',6,'p_FUNCION_SPLIT','parser.py',424),
  ('EXPRESION -> cadena','EXPRESION',1,'p_EXPRESION_cadena','parser.py',433),
  ('EXPRESION -> numero','EXPRESION',1,'p_EXPRESION_numero','parser.py',440),
  ('EXPRESION -> true','EXPRESION',1,'p_EXPRESION_booleano','parser.py',447),
  ('EXPRESION -> false','EXPRESION',1,'p_EXPRESION_booleano','parser.py',448),
  ('EXPRESION -> null','EXPRESION',1,'p_EXPRESION_null','parser.py',455),
  ('EXPRESION -> id','EXPRESION',1,'p_EXPRESION_Acceso','parser.py',462),
  ('EXPRESION -> id LISTAINDICES','EXPRESION',2,'p_EXPRESION_Acceso_Vector','parser.py',469),
  ('EXPRESION -> c_Abre LISTAEXPRESIONES c_Cierra','EXPRESION',3,'p_EXPRESION_Vector','parser.py',476),
  ('TIPO -> number','TIPO',1,'p_TIPO_NUMBER','parser.py',484),
  ('TIPO -> string','TIPO',1,'p_TIPO_STRING','parser.py',490),
  ('TIPO -> boolean','TIPO',1,'p_TIPO_BOOLEAN','parser.py',496),
  ('TIPO -> any','TIPO',1,'p_TIPO_ANY','parser.py',502),
]
