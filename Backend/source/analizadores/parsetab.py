
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftorleftandleftsumarestanonassocmenormayormenorigualmayorigualigualaciondiferenteleftmultiplicaciondivisionmoduloleftpotenciarightnotlefturestaand any boolean cadena coma console diferente division dosPuntos false id igual igualacion let log mayor mayorigual menor menorigual modulo multiplicacion not null number numero or p_Abre p_Cierra potencia punto puntoYcoma resta string suma true\n    INICIO : ENTRADAS\n    \n    ENTRADAS : ENTRADAS ENTRADA\n    \n    ENTRADAS : ENTRADA\n    \n    ENTRADA : IMPRIMIR puntoYcoma\n    \n    ENTRADA : DECLARACION puntoYcoma\n    \n    DECLARACION : let id igual EXPRESION\n    \n    DECLARACION : let id dosPuntos TIPO igual EXPRESION\n    \n    ENTRADA : ASIGNACION puntoYcoma\n    \n    ASIGNACION : id igual EXPRESION\n    \n    IMPRIMIR : console punto log p_Abre LISTAEXPRESIONES p_Cierra\n    \n    LISTAEXPRESIONES :  LISTAEXPRESIONES coma EXPRESION\n    \n    LISTAEXPRESIONES : EXPRESION\n    \n    EXPRESION : EXPRESION suma EXPRESION\n    \n    EXPRESION : EXPRESION resta EXPRESION\n    \n    EXPRESION : EXPRESION multiplicacion EXPRESION\n    \n    EXPRESION : EXPRESION division EXPRESION\n    \n    EXPRESION : EXPRESION potencia EXPRESION\n    \n    EXPRESION : EXPRESION modulo EXPRESION\n    \n    EXPRESION : resta EXPRESION %prec uresta\n    \n    EXPRESION : EXPRESION and EXPRESION\n    \n    EXPRESION : EXPRESION or EXPRESION\n    \n    EXPRESION : not EXPRESION\n    \n    EXPRESION : EXPRESION mayor EXPRESION\n    \n    EXPRESION : EXPRESION mayorigual EXPRESION\n    \n    EXPRESION : EXPRESION menor EXPRESION\n    \n    EXPRESION : EXPRESION menorigual EXPRESION\n    \n    EXPRESION : EXPRESION igualacion EXPRESION\n    \n    EXPRESION : EXPRESION diferente EXPRESION\n    \n    EXPRESION : cadena\n    \n    EXPRESION : numero\n    \n    EXPRESION : true\n                | false\n    \n    EXPRESION : null\n    \n    TIPO : number\n    \n    TIPO : string\n    \n    TIPO : boolean\n    \n    TIPO : any\n    '
    
_lr_action_items = {'console':([0,2,3,10,11,12,13,],[7,7,-3,-2,-4,-5,-8,]),'let':([0,2,3,10,11,12,13,],[8,8,-3,-2,-4,-5,-8,]),'id':([0,2,3,8,10,11,12,13,],[9,9,-3,15,-2,-4,-5,-8,]),'$end':([1,2,3,10,11,12,13,],[0,-1,-3,-2,-4,-5,-8,]),'puntoYcoma':([4,5,6,20,23,24,25,26,27,29,49,50,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,],[11,12,13,-9,-29,-30,-31,-32,-33,-6,-19,-22,-13,-14,-15,-16,-17,-18,-20,-21,-23,-24,-25,-26,-27,-28,-10,-7,]),'punto':([7,],[14,]),'igual':([9,15,30,31,32,33,34,],[16,18,53,-34,-35,-36,-37,]),'log':([14,],[17,]),'dosPuntos':([15,],[19,]),'resta':([16,18,20,21,22,23,24,25,26,27,28,29,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,70,71,],[21,21,36,21,21,-29,-30,-31,-32,-33,21,36,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-19,-22,36,21,-13,-14,-15,-16,-17,-18,36,36,-23,-24,-25,-26,-27,-28,21,36,36,]),'not':([16,18,21,22,28,35,36,37,38,39,40,41,42,43,44,45,46,47,48,53,69,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'cadena':([16,18,21,22,28,35,36,37,38,39,40,41,42,43,44,45,46,47,48,53,69,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'numero':([16,18,21,22,28,35,36,37,38,39,40,41,42,43,44,45,46,47,48,53,69,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'true':([16,18,21,22,28,35,36,37,38,39,40,41,42,43,44,45,46,47,48,53,69,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'false':([16,18,21,22,28,35,36,37,38,39,40,41,42,43,44,45,46,47,48,53,69,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'null':([16,18,21,22,28,35,36,37,38,39,40,41,42,43,44,45,46,47,48,53,69,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'p_Abre':([17,],[28,]),'number':([19,],[31,]),'string':([19,],[32,]),'boolean':([19,],[33,]),'any':([19,],[34,]),'suma':([20,23,24,25,26,27,29,49,50,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,70,71,],[35,-29,-30,-31,-32,-33,35,-19,-22,35,-13,-14,-15,-16,-17,-18,35,35,-23,-24,-25,-26,-27,-28,35,35,]),'multiplicacion':([20,23,24,25,26,27,29,49,50,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,70,71,],[37,-29,-30,-31,-32,-33,37,-19,-22,37,37,37,-15,-16,-17,-18,37,37,37,37,37,37,37,37,37,37,]),'division':([20,23,24,25,26,27,29,49,50,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,70,71,],[38,-29,-30,-31,-32,-33,38,-19,-22,38,38,38,-15,-16,-17,-18,38,38,38,38,38,38,38,38,38,38,]),'potencia':([20,23,24,25,26,27,29,49,50,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,70,71,],[39,-29,-30,-31,-32,-33,39,-19,-22,39,39,39,39,39,-17,39,39,39,39,39,39,39,39,39,39,39,]),'modulo':([20,23,24,25,26,27,29,49,50,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,70,71,],[40,-29,-30,-31,-32,-33,40,-19,-22,40,40,40,-15,-16,-17,-18,40,40,40,40,40,40,40,40,40,40,]),'and':([20,23,24,25,26,27,29,49,50,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,70,71,],[41,-29,-30,-31,-32,-33,41,-19,-22,41,-13,-14,-15,-16,-17,-18,-20,41,-23,-24,-25,-26,-27,-28,41,41,]),'or':([20,23,24,25,26,27,29,49,50,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,70,71,],[42,-29,-30,-31,-32,-33,42,-19,-22,42,-13,-14,-15,-16,-17,-18,-20,-21,-23,-24,-25,-26,-27,-28,42,42,]),'mayor':([20,23,24,25,26,27,29,49,50,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,70,71,],[43,-29,-30,-31,-32,-33,43,-19,-22,43,43,43,-15,-16,-17,-18,43,43,None,None,None,None,None,None,43,43,]),'mayorigual':([20,23,24,25,26,27,29,49,50,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,70,71,],[44,-29,-30,-31,-32,-33,44,-19,-22,44,44,44,-15,-16,-17,-18,44,44,None,None,None,None,None,None,44,44,]),'menor':([20,23,24,25,26,27,29,49,50,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,70,71,],[45,-29,-30,-31,-32,-33,45,-19,-22,45,45,45,-15,-16,-17,-18,45,45,None,None,None,None,None,None,45,45,]),'menorigual':([20,23,24,25,26,27,29,49,50,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,70,71,],[46,-29,-30,-31,-32,-33,46,-19,-22,46,46,46,-15,-16,-17,-18,46,46,None,None,None,None,None,None,46,46,]),'igualacion':([20,23,24,25,26,27,29,49,50,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,70,71,],[47,-29,-30,-31,-32,-33,47,-19,-22,47,47,47,-15,-16,-17,-18,47,47,None,None,None,None,None,None,47,47,]),'diferente':([20,23,24,25,26,27,29,49,50,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,70,71,],[48,-29,-30,-31,-32,-33,48,-19,-22,48,48,48,-15,-16,-17,-18,48,48,None,None,None,None,None,None,48,48,]),'p_Cierra':([23,24,25,26,27,49,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,71,],[-29,-30,-31,-32,-33,-19,-22,68,-12,-13,-14,-15,-16,-17,-18,-20,-21,-23,-24,-25,-26,-27,-28,-11,]),'coma':([23,24,25,26,27,49,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,71,],[-29,-30,-31,-32,-33,-19,-22,69,-12,-13,-14,-15,-16,-17,-18,-20,-21,-23,-24,-25,-26,-27,-28,-11,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'INICIO':([0,],[1,]),'ENTRADAS':([0,],[2,]),'ENTRADA':([0,2,],[3,10,]),'IMPRIMIR':([0,2,],[4,4,]),'DECLARACION':([0,2,],[5,5,]),'ASIGNACION':([0,2,],[6,6,]),'EXPRESION':([16,18,21,22,28,35,36,37,38,39,40,41,42,43,44,45,46,47,48,53,69,],[20,29,49,50,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,70,71,]),'TIPO':([19,],[30,]),'LISTAEXPRESIONES':([28,],[51,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> INICIO","S'",1,None,None,None),
  ('INICIO -> ENTRADAS','INICIO',1,'p_INICIO','parser.py',44),
  ('ENTRADAS -> ENTRADAS ENTRADA','ENTRADAS',2,'p_ENTRADAS_PARTE_1','parser.py',50),
  ('ENTRADAS -> ENTRADA','ENTRADAS',1,'p_ENTRADAS_PARTE_2','parser.py',57),
  ('ENTRADA -> IMPRIMIR puntoYcoma','ENTRADA',2,'p_ENTRADA','parser.py',63),
  ('ENTRADA -> DECLARACION puntoYcoma','ENTRADA',2,'p_ENTRADA_Declaracion','parser.py',82),
  ('DECLARACION -> let id igual EXPRESION','DECLARACION',4,'p_DECLARACION_NoTipada','parser.py',88),
  ('DECLARACION -> let id dosPuntos TIPO igual EXPRESION','DECLARACION',6,'p_DECLARACION_Tipada','parser.py',96),
  ('ENTRADA -> ASIGNACION puntoYcoma','ENTRADA',2,'p_ENTRADA_Asignacion','parser.py',105),
  ('ASIGNACION -> id igual EXPRESION','ASIGNACION',3,'p_ASIGNACION','parser.py',111),
  ('IMPRIMIR -> console punto log p_Abre LISTAEXPRESIONES p_Cierra','IMPRIMIR',6,'p_IMPRIMIR_1','parser.py',119),
  ('LISTAEXPRESIONES -> LISTAEXPRESIONES coma EXPRESION','LISTAEXPRESIONES',3,'p_LISTAEXPRESIONES_1','parser.py',125),
  ('LISTAEXPRESIONES -> EXPRESION','LISTAEXPRESIONES',1,'p_LISTAEXPRESIONES_2','parser.py',133),
  ('EXPRESION -> EXPRESION suma EXPRESION','EXPRESION',3,'p_EXPRESION_suma','parser.py',141),
  ('EXPRESION -> EXPRESION resta EXPRESION','EXPRESION',3,'p_EXPRESION_resta','parser.py',148),
  ('EXPRESION -> EXPRESION multiplicacion EXPRESION','EXPRESION',3,'p_EXPRESION_multiplicacion','parser.py',155),
  ('EXPRESION -> EXPRESION division EXPRESION','EXPRESION',3,'p_EXPRESION_division','parser.py',162),
  ('EXPRESION -> EXPRESION potencia EXPRESION','EXPRESION',3,'p_EXPRESION_potencia','parser.py',169),
  ('EXPRESION -> EXPRESION modulo EXPRESION','EXPRESION',3,'p_EXPRESION_modulo','parser.py',176),
  ('EXPRESION -> resta EXPRESION','EXPRESION',2,'p_EXPRESION_negativo','parser.py',183),
  ('EXPRESION -> EXPRESION and EXPRESION','EXPRESION',3,'p_EXPRESION_and','parser.py',192),
  ('EXPRESION -> EXPRESION or EXPRESION','EXPRESION',3,'p_EXPRESION_or','parser.py',199),
  ('EXPRESION -> not EXPRESION','EXPRESION',2,'p_EXPRESION_not','parser.py',206),
  ('EXPRESION -> EXPRESION mayor EXPRESION','EXPRESION',3,'p_EXPRESION_mayor','parser.py',215),
  ('EXPRESION -> EXPRESION mayorigual EXPRESION','EXPRESION',3,'p_EXPRESION_mayorigual','parser.py',222),
  ('EXPRESION -> EXPRESION menor EXPRESION','EXPRESION',3,'p_EXPRESION_menor','parser.py',229),
  ('EXPRESION -> EXPRESION menorigual EXPRESION','EXPRESION',3,'p_EXPRESION_menorigual','parser.py',236),
  ('EXPRESION -> EXPRESION igualacion EXPRESION','EXPRESION',3,'p_EXPRESION_igualacion','parser.py',243),
  ('EXPRESION -> EXPRESION diferente EXPRESION','EXPRESION',3,'p_EXPRESION_diferente','parser.py',250),
  ('EXPRESION -> cadena','EXPRESION',1,'p_EXPRESION_cadena','parser.py',258),
  ('EXPRESION -> numero','EXPRESION',1,'p_EXPRESION_numero','parser.py',265),
  ('EXPRESION -> true','EXPRESION',1,'p_EXPRESION_booleano','parser.py',272),
  ('EXPRESION -> false','EXPRESION',1,'p_EXPRESION_booleano','parser.py',273),
  ('EXPRESION -> null','EXPRESION',1,'p_EXPRESION_null','parser.py',280),
  ('TIPO -> number','TIPO',1,'p_TIPO_NUMBER','parser.py',288),
  ('TIPO -> string','TIPO',1,'p_TIPO_STRING','parser.py',294),
  ('TIPO -> boolean','TIPO',1,'p_TIPO_BOOLEAN','parser.py',300),
  ('TIPO -> any','TIPO',1,'p_TIPO_ANY','parser.py',306),
]
