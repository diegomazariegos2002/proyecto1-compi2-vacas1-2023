
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftorleftandleftsumarestanonassocmenormayormenorigualmayorigualigualaciondiferenteleftmultiplicaciondivisionmoduloleftpotenciarightnotlefturestaand any boolean break c_Abre c_Cierra cadena coma concat console diferente division dosPuntos else false id if igual igualacion let llave_Abre llave_Cierra log mayor mayorigual menor menorigual modulo multiplicacion not null number numero or p_Abre p_Cierra potencia punto puntoYcoma resta split string suma toExponential toFixed toLowerCase toString toUpperCase true while\n    INICIO : ENTRADAS\n    \n    ENTRADAS : ENTRADAS ENTRADA\n    \n    ENTRADAS : ENTRADA\n    \n    ENTRADA : IMPRIMIR puntoYcoma\n            |   IF puntoYcoma\n            |   WHILE puntoYcoma\n            |   BREAK\n    \n    BREAK : break puntoYcoma\n    \n    WHILE : while p_Abre EXPRESION p_Cierra llave_Abre ENTRADAS llave_Cierra\n    \n    IF : if p_Abre EXPRESION p_Cierra llave_Abre ENTRADAS llave_Cierra COMPLEMENTO_IF\n    \n    COMPLEMENTO_IF : else IF\n                    | else llave_Abre ENTRADAS llave_Cierra\n                    | \n    \n    ENTRADA : DECLARACION puntoYcoma\n    \n    DECLARACION : let id igual EXPRESION\n    \n    DECLARACION : let id dosPuntos TIPO igual EXPRESION\n    \n    DECLARACION : let id \n    \n    DECLARACION : let id dosPuntos TIPO\n    \n    ENTRADA : ASIGNACION puntoYcoma\n    \n    ASIGNACION : id igual EXPRESION\n    \n    ASIGNACION : id LISTAINDICES igual EXPRESION\n    \n    IMPRIMIR : console punto log p_Abre LISTAEXPRESIONES p_Cierra\n    \n    LISTAEXPRESIONES :  LISTAEXPRESIONES coma EXPRESION\n    \n    LISTAEXPRESIONES : EXPRESION\n    \n    LISTAINDICES :  LISTAINDICES c_Abre EXPRESION c_Cierra\n    \n    LISTAINDICES : c_Abre EXPRESION c_Cierra\n    \n    EXPRESION : EXPRESION suma EXPRESION\n    \n    EXPRESION : EXPRESION resta EXPRESION\n    \n    EXPRESION : EXPRESION multiplicacion EXPRESION\n    \n    EXPRESION : EXPRESION division EXPRESION\n    \n    EXPRESION : EXPRESION potencia EXPRESION\n    \n    EXPRESION : EXPRESION modulo EXPRESION\n    \n    EXPRESION : resta EXPRESION %prec uresta\n    \n    EXPRESION : EXPRESION and EXPRESION\n    \n    EXPRESION : EXPRESION or EXPRESION\n    \n    EXPRESION : not EXPRESION\n    \n    EXPRESION : EXPRESION mayor EXPRESION\n    \n    EXPRESION : EXPRESION mayorigual EXPRESION\n    \n    EXPRESION : EXPRESION menor EXPRESION\n    \n    EXPRESION : EXPRESION menorigual EXPRESION\n    \n    EXPRESION : EXPRESION igualacion EXPRESION\n    \n    EXPRESION : EXPRESION diferente EXPRESION\n    \n    EXPRESION : FUNCION_TOFIXED\n            | FUNCION_TOEXPONENTIAL\n            | FUNCION_TOSTRING\n            | FUNCION_TOLOWERCASE\n            | FUNCION_TOUPPERCASE\n            | FUNCION_SPLIT\n    \n    FUNCION_TOFIXED : id punto toFixed p_Abre EXPRESION p_Cierra\n    \n    FUNCION_TOEXPONENTIAL : id punto toExponential p_Abre EXPRESION p_Cierra\n    \n    FUNCION_TOSTRING : id punto toString p_Abre p_Cierra\n    \n    FUNCION_TOLOWERCASE : id punto toLowerCase p_Abre p_Cierra\n    \n    FUNCION_TOUPPERCASE : id punto toUpperCase p_Abre p_Cierra\n    \n    FUNCION_SPLIT : id punto split p_Abre cadena p_Cierra\n    \n    EXPRESION : cadena\n    \n    EXPRESION : numero\n    \n    EXPRESION : true\n                | false\n    \n    EXPRESION : null\n    \n    EXPRESION : id\n    \n    EXPRESION : id LISTAINDICES\n    \n    EXPRESION : c_Abre LISTAEXPRESIONES c_Cierra\n    \n    TIPO : number\n    \n    TIPO : string\n    \n    TIPO : boolean\n    \n    TIPO : any\n    '
    
_lr_action_items = {'console':([0,2,3,7,16,17,18,19,20,21,25,87,110,114,122,138,139,],[10,10,-3,-7,-2,-4,-5,-6,-14,-19,-8,10,10,10,10,10,10,]),'if':([0,2,3,7,16,17,18,19,20,21,25,87,110,114,122,133,138,139,],[11,11,-3,-7,-2,-4,-5,-6,-14,-19,-8,11,11,11,11,11,11,11,]),'while':([0,2,3,7,16,17,18,19,20,21,25,87,110,114,122,138,139,],[12,12,-3,-7,-2,-4,-5,-6,-14,-19,-8,12,12,12,12,12,12,]),'break':([0,2,3,7,16,17,18,19,20,21,25,87,110,114,122,138,139,],[13,13,-3,-7,-2,-4,-5,-6,-14,-19,-8,13,13,13,13,13,13,]),'let':([0,2,3,7,16,17,18,19,20,21,25,87,110,114,122,138,139,],[14,14,-3,-7,-2,-4,-5,-6,-14,-19,-8,14,14,14,14,14,14,]),'id':([0,2,3,7,14,16,17,18,19,20,21,23,24,25,27,29,32,33,46,48,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,87,109,110,111,114,115,116,122,138,139,],[15,15,-3,-7,26,-2,-4,-5,-6,-14,-19,45,45,-8,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,15,45,15,45,15,45,45,15,15,15,]),'$end':([1,2,3,7,16,17,18,19,20,21,25,],[0,-1,-3,-7,-2,-4,-5,-6,-14,-19,-8,]),'llave_Cierra':([3,7,16,17,18,19,20,21,25,114,122,139,],[-3,-7,-2,-4,-5,-6,-14,-19,-8,124,131,140,]),'puntoYcoma':([4,5,6,8,9,13,26,34,35,36,37,38,39,40,41,42,43,44,45,50,70,71,72,77,78,79,80,81,82,83,85,88,89,90,91,92,93,94,95,96,97,98,99,100,101,108,112,113,123,124,127,128,129,131,132,134,135,136,137,140,],[17,18,19,20,21,25,-17,-43,-44,-45,-46,-47,-48,-55,-56,-57,-58,-59,-60,-20,-33,-36,-61,-15,-18,-63,-64,-65,-66,-21,-26,-27,-28,-29,-30,-31,-32,-34,-35,-37,-38,-39,-40,-41,-42,-62,-25,-22,-16,-13,-51,-52,-53,-9,-10,-49,-50,-54,-11,-12,]),'punto':([10,45,],[22,73,]),'p_Abre':([11,12,30,102,103,104,105,106,107,],[23,24,54,115,116,117,118,119,120,]),'igual':([15,26,28,78,79,80,81,82,85,112,],[27,48,51,111,-63,-64,-65,-66,-26,-25,]),'c_Abre':([15,23,24,27,28,29,32,33,45,46,48,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,72,85,109,111,112,115,116,],[29,46,46,46,52,46,46,46,29,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,52,-26,46,46,-25,46,46,]),'log':([22,],[30,]),'resta':([23,24,27,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,52,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,75,77,83,84,85,88,89,90,91,92,93,94,95,96,97,98,99,100,101,108,109,111,112,115,116,121,123,125,126,127,128,129,134,135,136,],[32,32,32,32,57,32,32,-43,-44,-45,-46,-47,-48,-55,-56,-57,-58,-59,-60,32,57,32,57,32,32,57,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-33,-36,-61,57,57,57,57,-26,-27,-28,-29,-30,-31,-32,57,57,-37,-38,-39,-40,-41,-42,-62,32,32,-25,32,32,57,57,57,57,-51,-52,-53,-49,-50,-54,]),'not':([23,24,27,29,32,33,46,48,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,109,111,115,116,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'cadena':([23,24,27,29,32,33,46,48,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,109,111,115,116,120,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,130,]),'numero':([23,24,27,29,32,33,46,48,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,109,111,115,116,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'true':([23,24,27,29,32,33,46,48,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,109,111,115,116,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'false':([23,24,27,29,32,33,46,48,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,109,111,115,116,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'null':([23,24,27,29,32,33,46,48,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,109,111,115,116,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'dosPuntos':([26,],[49,]),'p_Cierra':([31,34,35,36,37,38,39,40,41,42,43,44,45,47,70,71,72,75,85,86,88,89,90,91,92,93,94,95,96,97,98,99,100,101,108,112,117,118,119,121,125,126,127,128,129,130,134,135,136,],[55,-43,-44,-45,-46,-47,-48,-55,-56,-57,-58,-59,-60,76,-33,-36,-61,-24,-26,113,-27,-28,-29,-30,-31,-32,-34,-35,-37,-38,-39,-40,-41,-42,-62,-25,127,128,129,-23,134,135,-51,-52,-53,136,-49,-50,-54,]),'suma':([31,34,35,36,37,38,39,40,41,42,43,44,45,47,50,53,70,71,72,75,77,83,84,85,88,89,90,91,92,93,94,95,96,97,98,99,100,101,108,112,121,123,125,126,127,128,129,134,135,136,],[56,-43,-44,-45,-46,-47,-48,-55,-56,-57,-58,-59,-60,56,56,56,-33,-36,-61,56,56,56,56,-26,-27,-28,-29,-30,-31,-32,56,56,-37,-38,-39,-40,-41,-42,-62,-25,56,56,56,56,-51,-52,-53,-49,-50,-54,]),'multiplicacion':([31,34,35,36,37,38,39,40,41,42,43,44,45,47,50,53,70,71,72,75,77,83,84,85,88,89,90,91,92,93,94,95,96,97,98,99,100,101,108,112,121,123,125,126,127,128,129,134,135,136,],[58,-43,-44,-45,-46,-47,-48,-55,-56,-57,-58,-59,-60,58,58,58,-33,-36,-61,58,58,58,58,-26,58,58,-29,-30,-31,-32,58,58,58,58,58,58,58,58,-62,-25,58,58,58,58,-51,-52,-53,-49,-50,-54,]),'division':([31,34,35,36,37,38,39,40,41,42,43,44,45,47,50,53,70,71,72,75,77,83,84,85,88,89,90,91,92,93,94,95,96,97,98,99,100,101,108,112,121,123,125,126,127,128,129,134,135,136,],[59,-43,-44,-45,-46,-47,-48,-55,-56,-57,-58,-59,-60,59,59,59,-33,-36,-61,59,59,59,59,-26,59,59,-29,-30,-31,-32,59,59,59,59,59,59,59,59,-62,-25,59,59,59,59,-51,-52,-53,-49,-50,-54,]),'potencia':([31,34,35,36,37,38,39,40,41,42,43,44,45,47,50,53,70,71,72,75,77,83,84,85,88,89,90,91,92,93,94,95,96,97,98,99,100,101,108,112,121,123,125,126,127,128,129,134,135,136,],[60,-43,-44,-45,-46,-47,-48,-55,-56,-57,-58,-59,-60,60,60,60,-33,-36,-61,60,60,60,60,-26,60,60,60,60,-31,60,60,60,60,60,60,60,60,60,-62,-25,60,60,60,60,-51,-52,-53,-49,-50,-54,]),'modulo':([31,34,35,36,37,38,39,40,41,42,43,44,45,47,50,53,70,71,72,75,77,83,84,85,88,89,90,91,92,93,94,95,96,97,98,99,100,101,108,112,121,123,125,126,127,128,129,134,135,136,],[61,-43,-44,-45,-46,-47,-48,-55,-56,-57,-58,-59,-60,61,61,61,-33,-36,-61,61,61,61,61,-26,61,61,-29,-30,-31,-32,61,61,61,61,61,61,61,61,-62,-25,61,61,61,61,-51,-52,-53,-49,-50,-54,]),'and':([31,34,35,36,37,38,39,40,41,42,43,44,45,47,50,53,70,71,72,75,77,83,84,85,88,89,90,91,92,93,94,95,96,97,98,99,100,101,108,112,121,123,125,126,127,128,129,134,135,136,],[62,-43,-44,-45,-46,-47,-48,-55,-56,-57,-58,-59,-60,62,62,62,-33,-36,-61,62,62,62,62,-26,-27,-28,-29,-30,-31,-32,-34,62,-37,-38,-39,-40,-41,-42,-62,-25,62,62,62,62,-51,-52,-53,-49,-50,-54,]),'or':([31,34,35,36,37,38,39,40,41,42,43,44,45,47,50,53,70,71,72,75,77,83,84,85,88,89,90,91,92,93,94,95,96,97,98,99,100,101,108,112,121,123,125,126,127,128,129,134,135,136,],[63,-43,-44,-45,-46,-47,-48,-55,-56,-57,-58,-59,-60,63,63,63,-33,-36,-61,63,63,63,63,-26,-27,-28,-29,-30,-31,-32,-34,-35,-37,-38,-39,-40,-41,-42,-62,-25,63,63,63,63,-51,-52,-53,-49,-50,-54,]),'mayor':([31,34,35,36,37,38,39,40,41,42,43,44,45,47,50,53,70,71,72,75,77,83,84,85,88,89,90,91,92,93,94,95,96,97,98,99,100,101,108,112,121,123,125,126,127,128,129,134,135,136,],[64,-43,-44,-45,-46,-47,-48,-55,-56,-57,-58,-59,-60,64,64,64,-33,-36,-61,64,64,64,64,-26,64,64,-29,-30,-31,-32,64,64,None,None,None,None,None,None,-62,-25,64,64,64,64,-51,-52,-53,-49,-50,-54,]),'mayorigual':([31,34,35,36,37,38,39,40,41,42,43,44,45,47,50,53,70,71,72,75,77,83,84,85,88,89,90,91,92,93,94,95,96,97,98,99,100,101,108,112,121,123,125,126,127,128,129,134,135,136,],[65,-43,-44,-45,-46,-47,-48,-55,-56,-57,-58,-59,-60,65,65,65,-33,-36,-61,65,65,65,65,-26,65,65,-29,-30,-31,-32,65,65,None,None,None,None,None,None,-62,-25,65,65,65,65,-51,-52,-53,-49,-50,-54,]),'menor':([31,34,35,36,37,38,39,40,41,42,43,44,45,47,50,53,70,71,72,75,77,83,84,85,88,89,90,91,92,93,94,95,96,97,98,99,100,101,108,112,121,123,125,126,127,128,129,134,135,136,],[66,-43,-44,-45,-46,-47,-48,-55,-56,-57,-58,-59,-60,66,66,66,-33,-36,-61,66,66,66,66,-26,66,66,-29,-30,-31,-32,66,66,None,None,None,None,None,None,-62,-25,66,66,66,66,-51,-52,-53,-49,-50,-54,]),'menorigual':([31,34,35,36,37,38,39,40,41,42,43,44,45,47,50,53,70,71,72,75,77,83,84,85,88,89,90,91,92,93,94,95,96,97,98,99,100,101,108,112,121,123,125,126,127,128,129,134,135,136,],[67,-43,-44,-45,-46,-47,-48,-55,-56,-57,-58,-59,-60,67,67,67,-33,-36,-61,67,67,67,67,-26,67,67,-29,-30,-31,-32,67,67,None,None,None,None,None,None,-62,-25,67,67,67,67,-51,-52,-53,-49,-50,-54,]),'igualacion':([31,34,35,36,37,38,39,40,41,42,43,44,45,47,50,53,70,71,72,75,77,83,84,85,88,89,90,91,92,93,94,95,96,97,98,99,100,101,108,112,121,123,125,126,127,128,129,134,135,136,],[68,-43,-44,-45,-46,-47,-48,-55,-56,-57,-58,-59,-60,68,68,68,-33,-36,-61,68,68,68,68,-26,68,68,-29,-30,-31,-32,68,68,None,None,None,None,None,None,-62,-25,68,68,68,68,-51,-52,-53,-49,-50,-54,]),'diferente':([31,34,35,36,37,38,39,40,41,42,43,44,45,47,50,53,70,71,72,75,77,83,84,85,88,89,90,91,92,93,94,95,96,97,98,99,100,101,108,112,121,123,125,126,127,128,129,134,135,136,],[69,-43,-44,-45,-46,-47,-48,-55,-56,-57,-58,-59,-60,69,69,69,-33,-36,-61,69,69,69,69,-26,69,69,-29,-30,-31,-32,69,69,None,None,None,None,None,None,-62,-25,69,69,69,69,-51,-52,-53,-49,-50,-54,]),'c_Cierra':([34,35,36,37,38,39,40,41,42,43,44,45,53,70,71,72,74,75,84,85,88,89,90,91,92,93,94,95,96,97,98,99,100,101,108,112,121,127,128,129,134,135,136,],[-43,-44,-45,-46,-47,-48,-55,-56,-57,-58,-59,-60,85,-33,-36,-61,108,-24,112,-26,-27,-28,-29,-30,-31,-32,-34,-35,-37,-38,-39,-40,-41,-42,-62,-25,-23,-51,-52,-53,-49,-50,-54,]),'coma':([34,35,36,37,38,39,40,41,42,43,44,45,70,71,72,74,75,85,86,88,89,90,91,92,93,94,95,96,97,98,99,100,101,108,112,121,127,128,129,134,135,136,],[-43,-44,-45,-46,-47,-48,-55,-56,-57,-58,-59,-60,-33,-36,-61,109,-24,-26,109,-27,-28,-29,-30,-31,-32,-34,-35,-37,-38,-39,-40,-41,-42,-62,-25,-23,-51,-52,-53,-49,-50,-54,]),'number':([49,],[79,]),'string':([49,],[80,]),'boolean':([49,],[81,]),'any':([49,],[82,]),'llave_Abre':([55,76,133,],[87,110,138,]),'toFixed':([73,],[102,]),'toExponential':([73,],[103,]),'toString':([73,],[104,]),'toLowerCase':([73,],[105,]),'toUpperCase':([73,],[106,]),'split':([73,],[107,]),'else':([124,],[133,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'INICIO':([0,],[1,]),'ENTRADAS':([0,87,110,138,],[2,114,122,139,]),'ENTRADA':([0,2,87,110,114,122,138,139,],[3,16,3,3,16,16,3,16,]),'IMPRIMIR':([0,2,87,110,114,122,138,139,],[4,4,4,4,4,4,4,4,]),'IF':([0,2,87,110,114,122,133,138,139,],[5,5,5,5,5,5,137,5,5,]),'WHILE':([0,2,87,110,114,122,138,139,],[6,6,6,6,6,6,6,6,]),'BREAK':([0,2,87,110,114,122,138,139,],[7,7,7,7,7,7,7,7,]),'DECLARACION':([0,2,87,110,114,122,138,139,],[8,8,8,8,8,8,8,8,]),'ASIGNACION':([0,2,87,110,114,122,138,139,],[9,9,9,9,9,9,9,9,]),'LISTAINDICES':([15,45,],[28,72,]),'EXPRESION':([23,24,27,29,32,33,46,48,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,109,111,115,116,],[31,47,50,53,70,71,75,77,83,84,75,88,89,90,91,92,93,94,95,96,97,98,99,100,101,121,123,125,126,]),'FUNCION_TOFIXED':([23,24,27,29,32,33,46,48,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,109,111,115,116,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'FUNCION_TOEXPONENTIAL':([23,24,27,29,32,33,46,48,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,109,111,115,116,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'FUNCION_TOSTRING':([23,24,27,29,32,33,46,48,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,109,111,115,116,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'FUNCION_TOLOWERCASE':([23,24,27,29,32,33,46,48,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,109,111,115,116,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'FUNCION_TOUPPERCASE':([23,24,27,29,32,33,46,48,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,109,111,115,116,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'FUNCION_SPLIT':([23,24,27,29,32,33,46,48,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,109,111,115,116,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'LISTAEXPRESIONES':([46,54,],[74,86,]),'TIPO':([49,],[78,]),'COMPLEMENTO_IF':([124,],[132,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> INICIO","S'",1,None,None,None),
  ('INICIO -> ENTRADAS','INICIO',1,'p_INICIO','parser.py',54),
  ('ENTRADAS -> ENTRADAS ENTRADA','ENTRADAS',2,'p_ENTRADAS_PARTE_1','parser.py',60),
  ('ENTRADAS -> ENTRADA','ENTRADAS',1,'p_ENTRADAS_PARTE_2','parser.py',67),
  ('ENTRADA -> IMPRIMIR puntoYcoma','ENTRADA',2,'p_ENTRADA','parser.py',73),
  ('ENTRADA -> IF puntoYcoma','ENTRADA',2,'p_ENTRADA','parser.py',74),
  ('ENTRADA -> WHILE puntoYcoma','ENTRADA',2,'p_ENTRADA','parser.py',75),
  ('ENTRADA -> BREAK','ENTRADA',1,'p_ENTRADA','parser.py',76),
  ('BREAK -> break puntoYcoma','BREAK',2,'p_BREAK','parser.py',94),
  ('WHILE -> while p_Abre EXPRESION p_Cierra llave_Abre ENTRADAS llave_Cierra','WHILE',7,'p_WHILE','parser.py',101),
  ('IF -> if p_Abre EXPRESION p_Cierra llave_Abre ENTRADAS llave_Cierra COMPLEMENTO_IF','IF',8,'p_IF','parser.py',108),
  ('COMPLEMENTO_IF -> else IF','COMPLEMENTO_IF',2,'p_COMPLEMENTO_IF','parser.py',114),
  ('COMPLEMENTO_IF -> else llave_Abre ENTRADAS llave_Cierra','COMPLEMENTO_IF',4,'p_COMPLEMENTO_IF','parser.py',115),
  ('COMPLEMENTO_IF -> <empty>','COMPLEMENTO_IF',0,'p_COMPLEMENTO_IF','parser.py',116),
  ('ENTRADA -> DECLARACION puntoYcoma','ENTRADA',2,'p_ENTRADA_Declaracion','parser.py',129),
  ('DECLARACION -> let id igual EXPRESION','DECLARACION',4,'p_DECLARACION_NoTipada','parser.py',135),
  ('DECLARACION -> let id dosPuntos TIPO igual EXPRESION','DECLARACION',6,'p_DECLARACION_Tipada','parser.py',142),
  ('DECLARACION -> let id','DECLARACION',2,'p_DECLARACION_SinExpresion_SinTipado','parser.py',148),
  ('DECLARACION -> let id dosPuntos TIPO','DECLARACION',4,'p_DECLARACION_SinExpresion_Tipado','parser.py',154),
  ('ENTRADA -> ASIGNACION puntoYcoma','ENTRADA',2,'p_ENTRADA_Asignacion','parser.py',162),
  ('ASIGNACION -> id igual EXPRESION','ASIGNACION',3,'p_ASIGNACION','parser.py',168),
  ('ASIGNACION -> id LISTAINDICES igual EXPRESION','ASIGNACION',4,'p_ASIGNACION_VEC','parser.py',174),
  ('IMPRIMIR -> console punto log p_Abre LISTAEXPRESIONES p_Cierra','IMPRIMIR',6,'p_IMPRIMIR_1','parser.py',181),
  ('LISTAEXPRESIONES -> LISTAEXPRESIONES coma EXPRESION','LISTAEXPRESIONES',3,'p_LISTAEXPRESIONES_1','parser.py',187),
  ('LISTAEXPRESIONES -> EXPRESION','LISTAEXPRESIONES',1,'p_LISTAEXPRESIONES_2','parser.py',195),
  ('LISTAINDICES -> LISTAINDICES c_Abre EXPRESION c_Cierra','LISTAINDICES',4,'p_LISTAEXPRESIONES_Indices','parser.py',201),
  ('LISTAINDICES -> c_Abre EXPRESION c_Cierra','LISTAINDICES',3,'p_LISTAEXPRESIONES_Indices_2','parser.py',208),
  ('EXPRESION -> EXPRESION suma EXPRESION','EXPRESION',3,'p_EXPRESION_suma','parser.py',216),
  ('EXPRESION -> EXPRESION resta EXPRESION','EXPRESION',3,'p_EXPRESION_resta','parser.py',223),
  ('EXPRESION -> EXPRESION multiplicacion EXPRESION','EXPRESION',3,'p_EXPRESION_multiplicacion','parser.py',230),
  ('EXPRESION -> EXPRESION division EXPRESION','EXPRESION',3,'p_EXPRESION_division','parser.py',237),
  ('EXPRESION -> EXPRESION potencia EXPRESION','EXPRESION',3,'p_EXPRESION_potencia','parser.py',244),
  ('EXPRESION -> EXPRESION modulo EXPRESION','EXPRESION',3,'p_EXPRESION_modulo','parser.py',251),
  ('EXPRESION -> resta EXPRESION','EXPRESION',2,'p_EXPRESION_negativo','parser.py',258),
  ('EXPRESION -> EXPRESION and EXPRESION','EXPRESION',3,'p_EXPRESION_and','parser.py',267),
  ('EXPRESION -> EXPRESION or EXPRESION','EXPRESION',3,'p_EXPRESION_or','parser.py',274),
  ('EXPRESION -> not EXPRESION','EXPRESION',2,'p_EXPRESION_not','parser.py',281),
  ('EXPRESION -> EXPRESION mayor EXPRESION','EXPRESION',3,'p_EXPRESION_mayor','parser.py',290),
  ('EXPRESION -> EXPRESION mayorigual EXPRESION','EXPRESION',3,'p_EXPRESION_mayorigual','parser.py',297),
  ('EXPRESION -> EXPRESION menor EXPRESION','EXPRESION',3,'p_EXPRESION_menor','parser.py',304),
  ('EXPRESION -> EXPRESION menorigual EXPRESION','EXPRESION',3,'p_EXPRESION_menorigual','parser.py',311),
  ('EXPRESION -> EXPRESION igualacion EXPRESION','EXPRESION',3,'p_EXPRESION_igualacion','parser.py',318),
  ('EXPRESION -> EXPRESION diferente EXPRESION','EXPRESION',3,'p_EXPRESION_diferente','parser.py',325),
  ('EXPRESION -> FUNCION_TOFIXED','EXPRESION',1,'p_EXPRESION_funcionesnativas','parser.py',334),
  ('EXPRESION -> FUNCION_TOEXPONENTIAL','EXPRESION',1,'p_EXPRESION_funcionesnativas','parser.py',335),
  ('EXPRESION -> FUNCION_TOSTRING','EXPRESION',1,'p_EXPRESION_funcionesnativas','parser.py',336),
  ('EXPRESION -> FUNCION_TOLOWERCASE','EXPRESION',1,'p_EXPRESION_funcionesnativas','parser.py',337),
  ('EXPRESION -> FUNCION_TOUPPERCASE','EXPRESION',1,'p_EXPRESION_funcionesnativas','parser.py',338),
  ('EXPRESION -> FUNCION_SPLIT','EXPRESION',1,'p_EXPRESION_funcionesnativas','parser.py',339),
  ('FUNCION_TOFIXED -> id punto toFixed p_Abre EXPRESION p_Cierra','FUNCION_TOFIXED',6,'p_FUNCION_TOFIXED','parser.py',345),
  ('FUNCION_TOEXPONENTIAL -> id punto toExponential p_Abre EXPRESION p_Cierra','FUNCION_TOEXPONENTIAL',6,'p_FUNCION_TOEXPONENTIAL','parser.py',352),
  ('FUNCION_TOSTRING -> id punto toString p_Abre p_Cierra','FUNCION_TOSTRING',5,'p_FUNCION_TOSTRING','parser.py',359),
  ('FUNCION_TOLOWERCASE -> id punto toLowerCase p_Abre p_Cierra','FUNCION_TOLOWERCASE',5,'p_FUNCION_TOLOWERCASE','parser.py',366),
  ('FUNCION_TOUPPERCASE -> id punto toUpperCase p_Abre p_Cierra','FUNCION_TOUPPERCASE',5,'p_FUNCION_TOUPPERCASE','parser.py',373),
  ('FUNCION_SPLIT -> id punto split p_Abre cadena p_Cierra','FUNCION_SPLIT',6,'p_FUNCION_SPLIT','parser.py',380),
  ('EXPRESION -> cadena','EXPRESION',1,'p_EXPRESION_cadena','parser.py',389),
  ('EXPRESION -> numero','EXPRESION',1,'p_EXPRESION_numero','parser.py',396),
  ('EXPRESION -> true','EXPRESION',1,'p_EXPRESION_booleano','parser.py',403),
  ('EXPRESION -> false','EXPRESION',1,'p_EXPRESION_booleano','parser.py',404),
  ('EXPRESION -> null','EXPRESION',1,'p_EXPRESION_null','parser.py',411),
  ('EXPRESION -> id','EXPRESION',1,'p_EXPRESION_Acceso','parser.py',418),
  ('EXPRESION -> id LISTAINDICES','EXPRESION',2,'p_EXPRESION_Acceso_Vector','parser.py',425),
  ('EXPRESION -> c_Abre LISTAEXPRESIONES c_Cierra','EXPRESION',3,'p_EXPRESION_Vector','parser.py',432),
  ('TIPO -> number','TIPO',1,'p_TIPO_NUMBER','parser.py',440),
  ('TIPO -> string','TIPO',1,'p_TIPO_STRING','parser.py',446),
  ('TIPO -> boolean','TIPO',1,'p_TIPO_BOOLEAN','parser.py',452),
  ('TIPO -> any','TIPO',1,'p_TIPO_ANY','parser.py',458),
]
